{"version":3,"file":"index.esm.js","sources":["../lib/fetch-polyfill.ts","../lib/helpers.ts","../lib/constants.ts","../lib/management/paths.ts","../lib/management/helpers.ts","../lib/management/user.ts","../lib/management/project.ts","../lib/management/tenant.ts","../lib/management/jwt.ts","../lib/management/permission.ts","../lib/management/role.ts","../lib/management/group.ts","../lib/management/sso.ts","../lib/management/accesskey.ts","../lib/management/flow.ts","../lib/management/theme.ts","../lib/management/audit.ts","../lib/management/authz.ts","../lib/management/ssoapplication.ts","../lib/management/password.ts","../lib/management/fga.ts","../lib/management/inboundapplication.ts","../lib/management/outboundapplication.ts","../lib/index.ts","../lib/management/index.ts","../lib/errors.ts"],"sourcesContent":["import { fetch as crossFetch, Headers } from 'cross-fetch';\n\nglobalThis.Headers ??= Headers;\n\nconst highWaterMarkMb = 1024 * 1024 * 30; // 30MB\n\n// we are increasing the response buffer size due to an issue where node-fetch hangs when response is too big\nconst patchedFetch = (...args: Parameters<typeof crossFetch>) => {\n  // we can get Request on the first arg, or RequestInfo on the second arg\n  // we want to make sure we are setting the \"highWaterMark\" so we are doing it on both args\n  args.forEach((arg) => {\n    // Updated to only apply highWaterMark to objects, as it can't be applied to strings (it breaks it)\n    if (arg && typeof arg === 'object') {\n      // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-unused-expressions\n      (arg as any).highWaterMark ??= highWaterMarkMb;\n    }\n  });\n\n  return crossFetch(...args);\n};\n\nexport default patchedFetch as unknown as typeof fetch;\n","import type { SdkFnWrapper } from '@descope/core-js-sdk';\nimport { authorizedTenantsClaimName, refreshTokenCookieName } from './constants';\nimport { AuthenticationInfo } from './types';\n\n/**\n * Generate a cookie string from given parameters\n * @param name name of the cookie\n * @param value value of cookie that must be already encoded\n * @param options any options to put on the cookie like cookieDomain, cookieMaxAge, cookiePath\n * @returns Cookie string with all options on the string\n */\nconst generateCookie = (name: string, value: string, options?: Record<string, string | number>) =>\n  `${name}=${value}; Domain=${options?.cookieDomain || ''}; Max-Age=${\n    options?.cookieMaxAge || ''\n  }; Path=${options?.cookiePath || '/'}; HttpOnly; SameSite=Strict`;\n\n/**\n * Parse the cookie string and return the value of the cookie\n * @param cookie the raw cookie string\n * @param name the name of the cookie to get value for\n * @returns the value of the given cookie\n */\nexport const getCookieValue = (cookie: string | null | undefined, name: string) => {\n  const match = cookie?.match(RegExp(`(?:^|[;,]\\\\s*)${name}=([^;]*)`));\n  return match ? match[1] : null;\n};\n\n/**\n * Add cookie generation to core-js functions.\n * @param fn the function we are wrapping\n * @returns Wrapped function with cookie generation\n */\nexport const withCookie: SdkFnWrapper<{ refreshJwt?: string; cookies?: string[] }> =\n  (fn) =>\n  async (...args) => {\n    const resp = await fn(...args);\n\n    // istanbul ignore next\n    if (!resp.data) {\n      return resp;\n    }\n\n    // eslint-disable-next-line prefer-const\n    let { refreshJwt, ...rest } = resp.data;\n    const cookies: string[] = [];\n\n    if (!refreshJwt) {\n      if (resp.response?.headers.get('set-cookie')) {\n        refreshJwt = getCookieValue(\n          resp.response?.headers.get('set-cookie'),\n          refreshTokenCookieName,\n        );\n        cookies.push(resp.response?.headers.get('set-cookie')!);\n      }\n    } else {\n      cookies.push(generateCookie(refreshTokenCookieName, refreshJwt, rest));\n    }\n\n    return { ...resp, data: { ...resp.data, refreshJwt, cookies } };\n  };\n\n/**\n * Get the claim (used for permissions or roles) for a given tenant or top level if tenant is empty\n * @param authInfo The parsed authentication info from the JWT\n * @param claim name of the claim\n * @param tenant tenant to retrieve the claim for\n * @returns the claim for the given tenant or top level if tenant is empty\n */\nexport function getAuthorizationClaimItems(\n  authInfo: AuthenticationInfo,\n  claim: string,\n  tenant?: string,\n): string[] {\n  const value = tenant\n    ? authInfo.token[authorizedTenantsClaimName]?.[tenant]?.[claim]\n    : authInfo.token[claim];\n  return Array.isArray(value) ? value : [];\n}\n\n/**\n * Check if the user is associated with the given tenant\n * @param authInfo The parsed authentication info from the JWT\n * @param tenant tenant to check if user is associated with\n * @returns true if user is associated with the tenant\n */\nexport function isUserAssociatedWithTenant(authInfo: AuthenticationInfo, tenant: string): boolean {\n  return !!authInfo.token[authorizedTenantsClaimName]?.[tenant];\n}\n","/** Refresh JWT cookie name */\nexport const refreshTokenCookieName = 'DSR';\n/** Session JWT cookie name */\nexport const sessionTokenCookieName = 'DS';\n/** The key of the tenants claims in the claims map */\nexport const authorizedTenantsClaimName = 'tenants';\n/** The key of the permissions claims in the claims map either under tenant or top level */\nexport const permissionsClaimName = 'permissions';\n/** The key of the roles claims in the claims map either under tenant or top level */\nexport const rolesClaimName = 'roles';\n","/** API paths for the Descope service Management APIs */\nexport default {\n  user: {\n    create: '/v1/mgmt/user/create',\n    createTestUser: '/v1/mgmt/user/create/test',\n    createBatch: '/v1/mgmt/user/create/batch',\n    update: '/v1/mgmt/user/update',\n    patch: '/v1/mgmt/user/patch',\n    delete: '/v1/mgmt/user/delete',\n    deleteBatch: '/v1/mgmt/user/delete/batch',\n    deleteAllTestUsers: '/v1/mgmt/user/test/delete/all',\n    load: '/v1/mgmt/user',\n    logout: '/v1/mgmt/user/logout',\n    search: '/v2/mgmt/user/search',\n    searchTestUsers: '/v2/mgmt/user/search/test',\n    getProviderToken: '/v1/mgmt/user/provider/token',\n    updateStatus: '/v1/mgmt/user/update/status',\n    updateLoginId: '/v1/mgmt/user/update/loginid',\n    updateEmail: '/v1/mgmt/user/update/email',\n    updatePhone: '/v1/mgmt/user/update/phone',\n    updateDisplayName: '/v1/mgmt/user/update/name',\n    updatePicture: '/v1/mgmt/user/update/picture',\n    updateCustomAttribute: '/v1/mgmt/user/update/customAttribute',\n    setRole: '/v1/mgmt/user/update/role/set',\n    addRole: '/v2/mgmt/user/update/role/add',\n    removeRole: '/v1/mgmt/user/update/role/remove',\n    setSSOApps: '/v1/mgmt/user/update/ssoapp/set',\n    addSSOApps: '/v1/mgmt/user/update/ssoapp/add',\n    removeSSOApps: '/v1/mgmt/user/update/ssoapp/remove',\n    addTenant: '/v1/mgmt/user/update/tenant/add',\n    removeTenant: '/v1/mgmt/user/update/tenant/remove',\n    setPassword: '/v1/mgmt/user/password/set', // Deprecated\n    setTemporaryPassword: '/v1/mgmt/user/password/set/temporary',\n    setActivePassword: '/v1/mgmt/user/password/set/active',\n    expirePassword: '/v1/mgmt/user/password/expire',\n    removeAllPasskeys: '/v1/mgmt/user/passkeys/delete',\n    removeTOTPSeed: '/v1/mgmt/user/totp/delete',\n    generateOTPForTest: '/v1/mgmt/tests/generate/otp',\n    generateMagicLinkForTest: '/v1/mgmt/tests/generate/magiclink',\n    generateEnchantedLinkForTest: '/v1/mgmt/tests/generate/enchantedlink',\n    generateEmbeddedLink: '/v1/mgmt/user/signin/embeddedlink',\n    generateSignUpEmbeddedLink: '/v1/mgmt/user/signup/embeddedlink',\n    history: '/v1/mgmt/user/history',\n  },\n  project: {\n    updateName: '/v1/mgmt/project/update/name',\n    updateTags: '/v1/mgmt/project/update/tags',\n    clone: '/v1/mgmt/project/clone',\n    projectsList: '/v1/mgmt/projects/list',\n    exportSnapshot: '/v1/mgmt/project/snapshot/export',\n    importSnapshot: '/v1/mgmt/project/snapshot/import',\n    validateSnapshot: '/v1/mgmt/project/snapshot/validate',\n  },\n  accessKey: {\n    create: '/v1/mgmt/accesskey/create',\n    load: '/v1/mgmt/accesskey',\n    search: '/v1/mgmt/accesskey/search',\n    update: '/v1/mgmt/accesskey/update',\n    deactivate: '/v1/mgmt/accesskey/deactivate',\n    activate: '/v1/mgmt/accesskey/activate',\n    delete: '/v1/mgmt/accesskey/delete',\n  },\n  tenant: {\n    create: '/v1/mgmt/tenant/create',\n    update: '/v1/mgmt/tenant/update',\n    delete: '/v1/mgmt/tenant/delete',\n    load: '/v1/mgmt/tenant',\n    settings: '/v1/mgmt/tenant/settings',\n    loadAll: '/v1/mgmt/tenant/all',\n    searchAll: '/v1/mgmt/tenant/search',\n    generateSSOConfigurationLink: '/v2/mgmt/tenant/adminlinks/sso/generate',\n  },\n  ssoApplication: {\n    oidcCreate: '/v1/mgmt/sso/idp/app/oidc/create',\n    samlCreate: '/v1/mgmt/sso/idp/app/saml/create',\n    oidcUpdate: '/v1/mgmt/sso/idp/app/oidc/update',\n    samlUpdate: '/v1/mgmt/sso/idp/app/saml/update',\n    delete: '/v1/mgmt/sso/idp/app/delete',\n    load: '/v1/mgmt/sso/idp/app/load',\n    loadAll: '/v1/mgmt/sso/idp/apps/load',\n  },\n  inboundApplication: {\n    create: '/v1/mgmt/thirdparty/app/create',\n    update: '/v1/mgmt/thirdparty/app/update',\n    patch: '/v1/mgmt/thirdparty/app/patch',\n    delete: '/v1/mgmt/thirdparty/app/delete',\n    load: '/v1/mgmt/thirdparty/app/load',\n    loadAll: '/v1/mgmt/thirdparty/apps/load',\n    secret: '/v1/mgmt/thirdparty/app/secret',\n    rotate: '/v1/mgmt/thirdparty/app/rotate',\n  },\n  inboundApplicationConsents: {\n    delete: '/v1/mgmt/thirdparty/consents/delete',\n    search: '/v1/mgmt/thirdparty/consents/search',\n  },\n  outboundApplication: {\n    create: '/v1/mgmt/outbound/app/create',\n    update: '/v1/mgmt/outbound/app/update',\n    delete: '/v1/mgmt/outbound/app/delete',\n    load: '/v1/mgmt/outbound/app',\n    loadAll: '/v1/mgmt/outbound/apps',\n    fetchToken: '/v1/mgmt/outbound/app/user/token/latest',\n    fetchTokenByScopes: '/v1/mgmt/outbound/app/user/token',\n    fetchTenantToken: '/v1/mgmt/outbound/app/tenant/token/latest',\n    fetchTenantTokenByScopes: '/v1/mgmt/outbound/app/tenant/token',\n  },\n  sso: {\n    settings: '/v1/mgmt/sso/settings',\n    settingsNew: '/v1/mgmt/sso/settings/new',\n    metadata: '/v1/mgmt/sso/metadata',\n    mapping: '/v1/mgmt/sso/mapping',\n    settingsv2: '/v2/mgmt/sso/settings',\n    settingsAllV2: '/v2/mgmt/sso/settings/all',\n    oidc: {\n      configure: '/v1/mgmt/sso/oidc',\n    },\n    saml: {\n      configure: '/v1/mgmt/sso/saml',\n      metadata: '/v1/mgmt/sso/saml/metadata',\n    },\n  },\n  jwt: {\n    update: '/v1/mgmt/jwt/update',\n    impersonate: '/v1/mgmt/impersonate',\n    stopImpersonation: '/v1/mgmt/stop/impersonation',\n    signIn: '/v1/mgmt/auth/signin',\n    signUp: '/v1/mgmt/auth/signup',\n    signUpOrIn: '/v1/mgmt/auth/signup-in',\n    anonymous: '/v1/mgmt/auth/anonymous',\n    clientAssertion: '/v1/mgmt/token/clientassertion',\n  },\n  password: {\n    settings: '/v1/mgmt/password/settings',\n  },\n  permission: {\n    create: '/v1/mgmt/permission/create',\n    update: '/v1/mgmt/permission/update',\n    delete: '/v1/mgmt/permission/delete',\n    loadAll: '/v1/mgmt/permission/all',\n  },\n  role: {\n    create: '/v1/mgmt/role/create',\n    update: '/v1/mgmt/role/update',\n    delete: '/v1/mgmt/role/delete',\n    loadAll: '/v1/mgmt/role/all',\n    search: '/v1/mgmt/role/search',\n  },\n  flow: {\n    list: '/v1/mgmt/flow/list',\n    delete: '/v1/mgmt/flow/delete',\n    export: '/v1/mgmt/flow/export',\n    import: '/v1/mgmt/flow/import',\n    run: '/v1/mgmt/flow/run',\n  },\n  theme: {\n    export: '/v1/mgmt/theme/export',\n    import: '/v1/mgmt/theme/import',\n  },\n  group: {\n    loadAllGroups: '/v1/mgmt/group/all',\n    loadAllGroupsForMember: '/v1/mgmt/group/member/all',\n    loadAllGroupMembers: '/v1/mgmt/group/members',\n  },\n  audit: {\n    search: '/v1/mgmt/audit/search',\n    createEvent: '/v1/mgmt/audit/event',\n  },\n  authz: {\n    schemaSave: '/v1/mgmt/authz/schema/save',\n    schemaDelete: '/v1/mgmt/authz/schema/delete',\n    schemaLoad: '/v1/mgmt/authz/schema/load',\n    nsSave: '/v1/mgmt/authz/ns/save',\n    nsDelete: '/v1/mgmt/authz/ns/delete',\n    rdSave: '/v1/mgmt/authz/rd/save',\n    rdDelete: '/v1/mgmt/authz/rd/delete',\n    reCreate: '/v1/mgmt/authz/re/create',\n    reDelete: '/v1/mgmt/authz/re/delete',\n    reDeleteResources: '/v1/mgmt/authz/re/deleteresources',\n    reDeleteResourceRelationsForResources: '/v1/mgmt/authz/re/deleteresourcesrelations',\n    hasRelations: '/v1/mgmt/authz/re/has',\n    who: '/v1/mgmt/authz/re/who',\n    resource: '/v1/mgmt/authz/re/resource',\n    targets: '/v1/mgmt/authz/re/targets',\n    targetAll: '/v1/mgmt/authz/re/targetall',\n    targetWithRelation: '/v1/mgmt/authz/re/targetwithrelation',\n    getModified: '/v1/mgmt/authz/getmodified',\n  },\n  fga: {\n    schema: '/v1/mgmt/fga/schema',\n    relations: '/v1/mgmt/fga/relations',\n    deleteRelations: '/v1/mgmt/fga/relations/delete',\n    check: '/v1/mgmt/fga/check',\n    resourcesLoad: '/v1/mgmt/fga/resources/load',\n    resourcesSave: '/v1/mgmt/fga/resources/save',\n  },\n};\n","/* eslint-disable import/prefer-default-export */\nimport { User } from './types';\n\n/**\n * Transforms user objects by converting roles to roleNames\n */\nexport function transformUsersForBatch(users: User[]): any[] {\n  return users.map(({ roles, ...user }) => ({\n    ...user,\n    roleNames: roles,\n  }));\n}\n","import {\n  HttpClient,\n  SdkResponse,\n  transformResponse,\n  UserHistoryResponse,\n  UserResponse,\n  LoginOptions,\n} from '@descope/core-js-sdk';\nimport {\n  ProviderTokenResponse,\n  AssociatedTenant,\n  GenerateEnchantedLinkForTestResponse,\n  GenerateMagicLinkForTestResponse,\n  GenerateOTPForTestResponse,\n  GenerateEmbeddedLinkResponse,\n  AttributesTypes,\n  UserStatus,\n  User,\n  CreateOrInviteBatchResponse,\n  TemplateOptions,\n  ProviderTokenOptions,\n  UserOptions,\n} from './types';\nimport { DeliveryMethodForTestUser } from '../types';\nimport apiPaths from './paths';\nimport { transformUsersForBatch } from './helpers';\n\ntype SearchSort = {\n  field: string;\n  desc?: boolean;\n};\n\ntype RolesList = {\n  values: string[];\n  and?: boolean;\n};\n\ntype SearchRequest = {\n  page?: number;\n  limit?: number;\n  sort?: SearchSort[];\n  text?: string;\n  emails?: string[];\n  phones?: string[];\n  statuses?: UserStatus[];\n  roles?: string[];\n  tenantIds?: string[];\n  customAttributes?: Record<string, AttributesTypes>;\n  withTestUser?: boolean;\n  testUsersOnly?: boolean;\n  ssoAppIds?: string[];\n  loginIds?: string[];\n  userIds?: string[];\n  fromCreatedTime?: number; // Search users created after this time (epoch in milliseconds)\n  toCreatedTime?: number; // Search users created before this time (epoch in milliseconds)\n  fromModifiedTime?: number; // Search users modified after this time (epoch in milliseconds)\n  toModifiedTime?: number; // Search users modified before this time (epoch in milliseconds)\n  tenantRoleIds?: Record<string, RolesList>; // Search users based on tenants and role IDs\n  tenantRoleNames?: Record<string, RolesList>; // Search users based on tenants and role names\n};\n\ntype SingleUserResponse = {\n  user: UserResponse;\n};\n\ntype MultipleUsersResponse = {\n  users: UserResponse[];\n};\n\nconst withUser = (httpClient: HttpClient) => {\n  /* Create User */\n  function create(loginId: string, options?: UserOptions): Promise<SdkResponse<UserResponse>>;\n  function create(\n    loginId: string,\n    email?: string,\n    phone?: string,\n    displayName?: string,\n    roles?: string[],\n    userTenants?: AssociatedTenant[],\n    customAttributes?: Record<string, AttributesTypes>,\n    picture?: string,\n    verifiedEmail?: boolean,\n    verifiedPhone?: boolean,\n    givenName?: string,\n    middleName?: string,\n    familyName?: string,\n    additionalLoginIds?: string[],\n  ): Promise<SdkResponse<UserResponse>>;\n\n  function create(\n    loginId: string,\n    emailOrOptions?: string | UserOptions,\n    phone?: string,\n    displayName?: string,\n    roles?: string[],\n    userTenants?: AssociatedTenant[],\n    customAttributes?: Record<string, AttributesTypes>,\n    picture?: string,\n    verifiedEmail?: boolean,\n    verifiedPhone?: boolean,\n    givenName?: string,\n    middleName?: string,\n    familyName?: string,\n    additionalLoginIds?: string[],\n  ): Promise<SdkResponse<UserResponse>> {\n    // We support both the old and new parameters forms of create user\n    // 1. The new form - create(loginId, { email, phone, ... }})\n    // 2. The old form - create(loginId, email, phone, ...)\n    const body =\n      typeof emailOrOptions === 'string'\n        ? {\n            loginId,\n            email: emailOrOptions,\n            phone,\n            displayName,\n            givenName,\n            middleName,\n            familyName,\n            roleNames: roles,\n            userTenants,\n            customAttributes,\n            picture,\n            verifiedEmail,\n            verifiedPhone,\n            additionalLoginIds,\n          }\n        : {\n            loginId,\n            ...emailOrOptions,\n            roleNames: emailOrOptions?.roles,\n            roles: undefined,\n          };\n    return transformResponse<SingleUserResponse, UserResponse>(\n      httpClient.post(apiPaths.user.create, body),\n      (data) => data.user,\n    );\n  }\n  /* Create User End */\n\n  /* Create Test User */\n  function createTestUser(\n    loginId: string,\n    options?: UserOptions,\n  ): Promise<SdkResponse<UserResponse>>;\n  function createTestUser(\n    loginId: string,\n    email?: string,\n    phone?: string,\n    displayName?: string,\n    roles?: string[],\n    userTenants?: AssociatedTenant[],\n    customAttributes?: Record<string, AttributesTypes>,\n    picture?: string,\n    verifiedEmail?: boolean,\n    verifiedPhone?: boolean,\n    givenName?: string,\n    middleName?: string,\n    familyName?: string,\n    additionalLoginIds?: string[],\n  ): Promise<SdkResponse<UserResponse>>;\n\n  function createTestUser(\n    loginId: string,\n    emailOrOptions?: string | UserOptions,\n    phone?: string,\n    displayName?: string,\n    roles?: string[],\n    userTenants?: AssociatedTenant[],\n    customAttributes?: Record<string, AttributesTypes>,\n    picture?: string,\n    verifiedEmail?: boolean,\n    verifiedPhone?: boolean,\n    givenName?: string,\n    middleName?: string,\n    familyName?: string,\n    additionalLoginIds?: string[],\n  ): Promise<SdkResponse<UserResponse>> {\n    // We support both the old and new parameters forms of create test user\n    // 1. The new form - createTestUser(loginId, { email, phone, ... }})\n    // 2. The old form - createTestUser(loginId, email, phone, ...)\n    const body =\n      typeof emailOrOptions === 'string'\n        ? {\n            loginId,\n            email: emailOrOptions,\n            phone,\n            displayName,\n            givenName,\n            middleName,\n            familyName,\n            roleNames: roles,\n            userTenants,\n            customAttributes,\n            picture,\n            verifiedEmail,\n            verifiedPhone,\n            additionalLoginIds,\n            test: true,\n          }\n        : {\n            loginId,\n            ...emailOrOptions,\n            roleNames: emailOrOptions?.roles,\n            roles: undefined,\n            test: true,\n          };\n    return transformResponse<SingleUserResponse, UserResponse>(\n      httpClient.post(apiPaths.user.createTestUser, body),\n      (data) => data.user,\n    );\n  }\n  /* Create Test User End */\n\n  /* Invite User */\n  function invite(\n    loginId: string,\n    options?: UserOptions & {\n      inviteUrl?: string;\n      sendMail?: boolean; // send invite via mail, default is according to project settings\n      sendSMS?: boolean; // send invite via text message, default is according to project settings\n      templateOptions?: TemplateOptions;\n      templateId?: string;\n    },\n  ): Promise<SdkResponse<UserResponse>>;\n  function invite(\n    loginId: string,\n    email?: string,\n    phone?: string,\n    displayName?: string,\n    roles?: string[],\n    userTenants?: AssociatedTenant[],\n    customAttributes?: Record<string, AttributesTypes>,\n    picture?: string,\n    verifiedEmail?: boolean,\n    verifiedPhone?: boolean,\n    inviteUrl?: string,\n    sendMail?: boolean, // send invite via mail, default is according to project settings\n    sendSMS?: boolean, // send invite via text message, default is according to project settings\n    givenName?: string,\n    middleName?: string,\n    familyName?: string,\n    additionalLoginIds?: string[],\n    templateId?: string,\n  ): Promise<SdkResponse<UserResponse>>;\n\n  function invite(\n    loginId: string,\n    emailOrOptions?: string | UserOptions,\n    phone?: string,\n    displayName?: string,\n    roles?: string[],\n    userTenants?: AssociatedTenant[],\n    customAttributes?: Record<string, AttributesTypes>,\n    picture?: string,\n    verifiedEmail?: boolean,\n    verifiedPhone?: boolean,\n    inviteUrl?: string,\n    sendMail?: boolean, // send invite via mail, default is according to project settings\n    sendSMS?: boolean, // send invite via text message, default is according to project settings\n    givenName?: string,\n    middleName?: string,\n    familyName?: string,\n    additionalLoginIds?: string[],\n    templateId?: string,\n  ): Promise<SdkResponse<UserResponse>> {\n    // We support both the old and new parameters forms of invite user\n    // 1. The new form - invite(loginId, { email, phone, ... }})\n    // 2. The old form - invite(loginId, email, phone, ...)\n    const body =\n      typeof emailOrOptions === 'string'\n        ? {\n            loginId,\n            email: emailOrOptions,\n            phone,\n            displayName,\n            givenName,\n            middleName,\n            familyName,\n            roleNames: roles,\n            userTenants,\n            invite: true,\n            customAttributes,\n            picture,\n            verifiedEmail,\n            verifiedPhone,\n            inviteUrl,\n            sendMail,\n            sendSMS,\n            additionalLoginIds,\n            templateId,\n          }\n        : {\n            loginId,\n            ...emailOrOptions,\n            roleNames: emailOrOptions?.roles,\n            roles: undefined,\n            invite: true,\n          };\n    return transformResponse<SingleUserResponse, UserResponse>(\n      httpClient.post(apiPaths.user.create, body),\n      (data) => data.user,\n    );\n  }\n  /* Invite User End */\n\n  /* Update User */\n  function update(loginId: string, options?: UserOptions): Promise<SdkResponse<UserResponse>>;\n  function update(\n    loginId: string,\n    email?: string,\n    phone?: string,\n    displayName?: string,\n    roles?: string[],\n    userTenants?: AssociatedTenant[],\n    customAttributes?: Record<string, AttributesTypes>,\n    picture?: string,\n    verifiedEmail?: boolean,\n    verifiedPhone?: boolean,\n    givenName?: string,\n    middleName?: string,\n    familyName?: string,\n    additionalLoginIds?: string[],\n  ): Promise<SdkResponse<UserResponse>>;\n\n  function update(\n    loginId: string,\n    emailOrOptions?: string | UserOptions,\n    phone?: string,\n    displayName?: string,\n    roles?: string[],\n    userTenants?: AssociatedTenant[],\n    customAttributes?: Record<string, AttributesTypes>,\n    picture?: string,\n    verifiedEmail?: boolean,\n    verifiedPhone?: boolean,\n    givenName?: string,\n    middleName?: string,\n    familyName?: string,\n    additionalLoginIds?: string[],\n  ): Promise<SdkResponse<UserResponse>> {\n    // We support both the old and new parameters forms of update user\n    // 1. The new form - update(loginId, { email, phone, ... }})\n    // 2. The old form - update(loginId, email, phone, ...)\n    const body =\n      typeof emailOrOptions === 'string'\n        ? {\n            loginId,\n            email: emailOrOptions,\n            phone,\n            displayName,\n            givenName,\n            middleName,\n            familyName,\n            roleNames: roles,\n            userTenants,\n            customAttributes,\n            picture,\n            verifiedEmail,\n            verifiedPhone,\n            additionalLoginIds,\n          }\n        : {\n            loginId,\n            ...emailOrOptions,\n            roleNames: emailOrOptions?.roles,\n            roles: undefined,\n          };\n    return transformResponse<SingleUserResponse, UserResponse>(\n      httpClient.post(apiPaths.user.update, body),\n      (data) => data.user,\n    );\n  }\n  /* Update User End */\n\n  /**\n   * Patches an existing user.\n   * @param loginId The login ID of the user\n   * @param options The fields to update. Only the provided ones will be updated.\n   */\n  function patch(loginId: string, options: PatchUserOptions): Promise<SdkResponse<UserResponse>> {\n    const body = {\n      loginId,\n    } as any;\n\n    if (options.email !== undefined) {\n      body.email = options.email;\n    }\n    if (options.phone !== undefined) {\n      body.phone = options.phone;\n    }\n    if (options.displayName !== undefined) {\n      body.displayName = options.displayName;\n    }\n    if (options.givenName !== undefined) {\n      body.givenName = options.givenName;\n    }\n    if (options.middleName !== undefined) {\n      body.middleName = options.middleName;\n    }\n    if (options.familyName !== undefined) {\n      body.familyName = options.familyName;\n    }\n    if (options.roles !== undefined) {\n      body.roleNames = options.roles;\n    }\n    if (options.userTenants !== undefined) {\n      body.userTenants = options.userTenants;\n    }\n    if (options.customAttributes !== undefined) {\n      body.customAttributes = options.customAttributes;\n    }\n    if (options.picture !== undefined) {\n      body.picture = options.picture;\n    }\n    if (options.verifiedEmail !== undefined) {\n      body.verifiedEmail = options.verifiedEmail;\n    }\n    if (options.verifiedPhone !== undefined) {\n      body.verifiedPhone = options.verifiedPhone;\n    }\n    if (options.ssoAppIds !== undefined) {\n      body.ssoAppIds = options.ssoAppIds;\n    }\n    if (options.scim !== undefined) {\n      body.scim = options.scim;\n    }\n\n    return transformResponse<SingleUserResponse, UserResponse>(\n      httpClient.patch(apiPaths.user.patch, body),\n      (data) => data.user,\n    );\n  }\n\n  return {\n    create,\n    /**\n     * Create a new test user.\n     * The loginID is required and will determine what the user will use to sign in.\n     * Make sure the login id is unique for test. All other fields are optional.\n     *\n     * You can later generate OTP, Magic link and enchanted link to use in the test without the need\n     * of 3rd party messaging services.\n     * Those users are not counted as part of the monthly active users\n     * @returns The UserResponse if found, throws otherwise.\n     */\n    createTestUser,\n    invite,\n    inviteBatch: (\n      users: User[],\n      inviteUrl?: string,\n      sendMail?: boolean, // send invite via mail, default is according to project settings\n      sendSMS?: boolean, // send invite via text message, default is according to project settings\n      templateOptions?: TemplateOptions,\n      templateId?: string,\n    ): Promise<SdkResponse<CreateOrInviteBatchResponse>> =>\n      transformResponse<CreateOrInviteBatchResponse, CreateOrInviteBatchResponse>(\n        httpClient.post(apiPaths.user.createBatch, {\n          users: transformUsersForBatch(users),\n          invite: true,\n          inviteUrl,\n          sendMail,\n          sendSMS,\n          templateOptions,\n          templateId,\n        }),\n        (data) => data,\n      ),\n    createBatch: (users: User[]): Promise<SdkResponse<CreateOrInviteBatchResponse>> =>\n      transformResponse<CreateOrInviteBatchResponse, CreateOrInviteBatchResponse>(\n        httpClient.post(apiPaths.user.createBatch, {\n          users: transformUsersForBatch(users),\n        }),\n        (data) => data,\n      ),\n    deleteBatch: (userIds: string[]): Promise<SdkResponse<never>> =>\n      transformResponse(httpClient.post(apiPaths.user.deleteBatch, { userIds })),\n    update,\n    patch,\n    /**\n     * Delete an existing user.\n     * @param loginId The login ID of the user\n     */\n    delete: (loginId: string): Promise<SdkResponse<never>> =>\n      transformResponse(httpClient.post(apiPaths.user.delete, { loginId })),\n    /**\n     * Delete an existing user by User ID.\n     * @param userId The user ID can be found in the Subject (`sub`) claim\n     * in the user's JWT.\n     */\n    deleteByUserId: (userId: string): Promise<SdkResponse<UserResponse>> =>\n      transformResponse(httpClient.post(apiPaths.user.delete, { userId })),\n    /**\n     * Delete all test users in the project.\n     */\n    deleteAllTestUsers: (): Promise<SdkResponse<never>> =>\n      transformResponse(httpClient.delete(apiPaths.user.deleteAllTestUsers)),\n    load: (loginId: string): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.get(apiPaths.user.load, {\n          queryParams: { loginId },\n        }),\n        (data) => data.user,\n      ),\n    /**\n     * Load an existing user by user ID. The ID can be found\n     * on the user's JWT.\n     * @param userId load a user by this user ID field\n     * @returns The UserResponse if found, throws otherwise.\n     */\n    loadByUserId: (userId: string): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.get(apiPaths.user.load, {\n          queryParams: { userId },\n        }),\n        (data) => data.user,\n      ),\n    /**\n     * Logout a user from all devices by the login ID\n     * @param loginId logout user by login ID\n     * @returns The UserResponse if found, throws otherwise.\n     */\n    logoutUser: (loginId: string): Promise<SdkResponse<never>> =>\n      transformResponse(httpClient.post(apiPaths.user.logout, { loginId })),\n    /**\n     * Logout a user from all devices by user ID. The ID can be found\n     * on the user's JWT.\n     * @param userId Logout a user from all devices by this user ID field\n     * @returns The UserResponse if found, throws otherwise.\n     */\n    logoutUserByUserId: (userId: string): Promise<SdkResponse<never>> =>\n      transformResponse(httpClient.post(apiPaths.user.logout, { userId })),\n    /**\n     * Search all users. Results can be filtered according to tenants and/or\n     * roles, and also paginated used the limit and page parameters.\n     * @deprecated Use search instead\n     * @param tenantIds optional list of tenant IDs to filter by\n     * @param roles optional list of roles to filter by\n     * @param limit optionally limit the response, leave out for default limit\n     * @param page optionally paginate over the response\n     * @param testUsersOnly optionally filter only test users\n     * @param withTestUser optionally include test users in search\n     * @returns An array of UserResponse found by the query\n     */\n    searchAll: (\n      tenantIds?: string[],\n      roles?: string[],\n      limit?: number,\n      page?: number,\n      testUsersOnly?: boolean,\n      withTestUser?: boolean,\n      customAttributes?: Record<string, AttributesTypes>,\n      statuses?: UserStatus[],\n      emails?: string[],\n      phones?: string[],\n    ): Promise<SdkResponse<UserResponse[]>> =>\n      transformResponse<MultipleUsersResponse, UserResponse[]>(\n        httpClient.post(apiPaths.user.search, {\n          tenantIds,\n          roleNames: roles,\n          limit,\n          page,\n          testUsersOnly,\n          withTestUser,\n          customAttributes,\n          statuses,\n          emails,\n          phones,\n        }),\n        (data) => data.users,\n      ),\n    searchTestUsers: (searchReq: SearchRequest): Promise<SdkResponse<UserResponse[]>> =>\n      transformResponse<MultipleUsersResponse, UserResponse[]>(\n        httpClient.post(apiPaths.user.searchTestUsers, {\n          ...searchReq,\n          withTestUser: true,\n          testUsersOnly: true,\n          roleNames: searchReq.roles,\n          roles: undefined,\n        }),\n        (data) => data.users,\n      ),\n    search: (searchReq: SearchRequest): Promise<SdkResponse<UserResponse[]>> =>\n      transformResponse<MultipleUsersResponse, UserResponse[]>(\n        httpClient.post(apiPaths.user.search, {\n          ...searchReq,\n          roleNames: searchReq.roles,\n          roles: undefined,\n        }),\n        (data) => data.users,\n      ),\n    /**\n     * Get the provider token for the given login ID.\n     * Only users that logged-in using social providers will have token.\n     * Note: The 'Manage tokens from provider' setting must be enabled.\n     * @param loginId the login ID of the user\n     * @param provider the provider name (google, facebook, etc.).\n     * @param providerTokenOptions optional, includes options for getting the provider token:\n     *    withRefreshToken - include the refresh token in the response\n     *    forceRefresh - force to refresh the token\n     * @returns The ProviderTokenResponse of the given user and provider\n     */\n    getProviderToken: (\n      loginId: string,\n      provider: string,\n      providerTokenOptions?: ProviderTokenOptions,\n    ): Promise<SdkResponse<ProviderTokenResponse>> =>\n      transformResponse<ProviderTokenResponse>(\n        httpClient.get(apiPaths.user.getProviderToken, {\n          queryParams: {\n            loginId,\n            provider,\n            withRefreshToken: providerTokenOptions?.withRefreshToken ? 'true' : 'false',\n            forceRefresh: providerTokenOptions?.forceRefresh ? 'true' : 'false',\n          },\n        }),\n        (data) => data,\n      ),\n    activate: (loginId: string): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.updateStatus, { loginId, status: 'enabled' }),\n        (data) => data.user,\n      ),\n    deactivate: (loginId: string): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.updateStatus, { loginId, status: 'disabled' }),\n        (data) => data.user,\n      ),\n    updateLoginId: (loginId: string, newLoginId?: string): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.updateLoginId, { loginId, newLoginId }),\n        (data) => data.user,\n      ),\n    updateEmail: (\n      loginId: string,\n      email: string,\n      isVerified: boolean,\n    ): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.updateEmail, { loginId, email, verified: isVerified }),\n        (data) => data.user,\n      ),\n    updatePhone: (\n      loginId: string,\n      phone: string,\n      isVerified: boolean,\n    ): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.updatePhone, { loginId, phone, verified: isVerified }),\n        (data) => data.user,\n      ),\n    updateDisplayName: (\n      loginId: string,\n      displayName?: string,\n      givenName?: string,\n      middleName?: string,\n      familyName?: string,\n    ): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.updateDisplayName, {\n          loginId,\n          displayName,\n          givenName,\n          middleName,\n          familyName,\n        }),\n        (data) => data.user,\n      ),\n    updatePicture: (loginId: string, picture: string): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.updatePicture, { loginId, picture }),\n        (data) => data.user,\n      ),\n    updateCustomAttribute: (\n      loginId: string,\n      attributeKey: string,\n      attributeValue: AttributesTypes,\n    ): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.updateCustomAttribute, {\n          loginId,\n          attributeKey,\n          attributeValue,\n        }),\n        (data) => data.user,\n      ),\n    setRoles: (loginId: string, roles: string[]): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.setRole, { loginId, roleNames: roles }),\n        (data) => data.user,\n      ),\n    addRoles: (loginId: string, roles: string[]): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.addRole, { loginId, roleNames: roles }),\n        (data) => data.user,\n      ),\n    removeRoles: (loginId: string, roles: string[]): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.removeRole, { loginId, roleNames: roles }),\n        (data) => data.user,\n      ),\n    addTenant: (loginId: string, tenantId: string): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.addTenant, { loginId, tenantId }),\n        (data) => data.user,\n      ),\n    removeTenant: (loginId: string, tenantId: string): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.removeTenant, { loginId, tenantId }),\n        (data) => data.user,\n      ),\n    setTenantRoles: (\n      loginId: string,\n      tenantId: string,\n      roles: string[],\n    ): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.setRole, { loginId, tenantId, roleNames: roles }),\n        (data) => data.user,\n      ),\n    addTenantRoles: (\n      loginId: string,\n      tenantId: string,\n      roles: string[],\n    ): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.addRole, { loginId, tenantId, roleNames: roles }),\n        (data) => data.user,\n      ),\n    removeTenantRoles: (\n      loginId: string,\n      tenantId: string,\n      roles: string[],\n    ): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.removeRole, { loginId, tenantId, roleNames: roles }),\n        (data) => data.user,\n      ),\n    addSSOapps: (loginId: string, ssoAppIds: string[]): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.addSSOApps, { loginId, ssoAppIds }),\n        (data) => data.user,\n      ),\n    setSSOapps: (loginId: string, ssoAppIds: string[]): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.setSSOApps, { loginId, ssoAppIds }),\n        (data) => data.user,\n      ),\n    removeSSOapps: (loginId: string, ssoAppIds: string[]): Promise<SdkResponse<UserResponse>> =>\n      transformResponse<SingleUserResponse, UserResponse>(\n        httpClient.post(apiPaths.user.removeSSOApps, { loginId, ssoAppIds }),\n        (data) => data.user,\n      ),\n\n    /**\n     * Generate OTP for the given login ID of a test user.\n     * Choose the selected delivery method for verification.\n     * Returns the code for the login (exactly as it sent via Email, SMS, Voice call or WhatsApp)\n     * This is useful when running tests and don't want to use 3rd party messaging services\n     *\n     * @param deliveryMethod optional DeliveryMethod\n     * @param loginId login ID of a test user\n     * @param loginOptions optional LoginOptions - can be provided to set custom claims to the generated jwt.\n     * @returns GenerateOTPForTestResponse which includes the loginId and the OTP code\n     */\n    generateOTPForTestUser: (\n      deliveryMethod: DeliveryMethodForTestUser,\n      loginId: string,\n      loginOptions?: LoginOptions,\n    ): Promise<SdkResponse<GenerateOTPForTestResponse>> =>\n      transformResponse<GenerateOTPForTestResponse>(\n        httpClient.post(apiPaths.user.generateOTPForTest, {\n          deliveryMethod,\n          loginId,\n          loginOptions,\n        }),\n        (data) => data,\n      ),\n\n    /**\n     * Generate Magic Link for the given login ID of a test user.\n     * Choose the selected delivery method for verification.\n     * It returns the link for the login (exactly as it sent via Email)\n     * This is useful when running tests and don't want to use 3rd party messaging services\n     *\n     * @param deliveryMethod optional DeliveryMethod\n     * @param loginId login ID of a test user\n     * @param uri optional redirect uri which will be used instead of any global configuration.\n     * @param loginOptions optional LoginOptions - can be provided to set custom claims to the generated jwt.\n     * @returns GenerateMagicLinkForTestResponse which includes the loginId and the magic link\n     */\n    generateMagicLinkForTestUser: (\n      deliveryMethod: DeliveryMethodForTestUser,\n      loginId: string,\n      uri: string,\n      loginOptions?: LoginOptions,\n    ): Promise<SdkResponse<GenerateMagicLinkForTestResponse>> =>\n      transformResponse<GenerateMagicLinkForTestResponse>(\n        httpClient.post(apiPaths.user.generateMagicLinkForTest, {\n          deliveryMethod,\n          loginId,\n          URI: uri,\n          loginOptions,\n        }),\n        (data) => data,\n      ),\n\n    /**\n     * Generate Enchanted Link for the given login ID of a test user.\n     * It returns the link for the login (exactly as it sent via Email)\n     * and pendingRef which is used to poll for a valid session\n     * This is useful when running tests and don't want to use 3rd party messaging services\n     *\n     * @param loginId login ID of a test user\n     * @param uri optional redirect uri which will be used instead of any global configuration.\n     * @param loginOptions optional LoginOptions - can be provided to set custom claims to the generated jwt.\n     * @returns GenerateEnchantedLinkForTestResponse which includes the loginId, the enchanted link and the pendingRef\n     */\n    generateEnchantedLinkForTestUser: (\n      loginId: string,\n      uri: string,\n      loginOptions?: LoginOptions,\n    ): Promise<SdkResponse<GenerateEnchantedLinkForTestResponse>> =>\n      transformResponse<GenerateEnchantedLinkForTestResponse>(\n        httpClient.post(apiPaths.user.generateEnchantedLinkForTest, {\n          loginId,\n          URI: uri,\n          loginOptions,\n        }),\n        (data) => data,\n      ),\n\n    generateEmbeddedLink: (\n      loginId: string,\n      customClaims?: Record<string, any>,\n      timeout?: number,\n    ): Promise<SdkResponse<GenerateEmbeddedLinkResponse>> =>\n      transformResponse<GenerateEmbeddedLinkResponse>(\n        httpClient.post(apiPaths.user.generateEmbeddedLink, { loginId, customClaims, timeout }),\n        (data) => data,\n      ),\n\n    generateSignUpEmbeddedLink: (\n      loginId: string,\n      user?: {\n        name?: string;\n        givenName?: string;\n        middleName?: string;\n        familyName?: string;\n        phone?: string;\n        email?: string;\n      },\n      emailVerified?: boolean,\n      phoneVerified?: boolean,\n      loginOptions?: LoginOptions,\n      timeout?: number,\n    ): Promise<SdkResponse<GenerateEmbeddedLinkResponse>> =>\n      transformResponse<GenerateEmbeddedLinkResponse>(\n        httpClient.post(apiPaths.user.generateSignUpEmbeddedLink, {\n          loginId,\n          user,\n          emailVerified,\n          phoneVerified,\n          loginOptions,\n          timeout,\n        }),\n        (data) => data,\n      ),\n\n    /**\n     * Set temporary password for the given login ID of user.\n     * Note: The password will automatically be set as expired.\n     * The user will not be able to log-in with this password, and will be required to replace it on next login.\n     * See also: expirePassword\n     * @param loginId The login ID of the user\n     * @param password The password to set for the user\n     */\n    setTemporaryPassword: (loginId: string, password: string): Promise<SdkResponse<never>> =>\n      transformResponse<never>(\n        httpClient.post(apiPaths.user.setTemporaryPassword, { loginId, password }),\n        (data) => data,\n      ),\n\n    /**\n     * Set password for the given login ID of user.\n     * @param loginId The login ID of the user\n     * @param password The password to set for the user\n     */\n    setActivePassword: (loginId: string, password: string): Promise<SdkResponse<never>> =>\n      transformResponse<never>(\n        httpClient.post(apiPaths.user.setActivePassword, { loginId, password }),\n        (data) => data,\n      ),\n\n    /** Deprecated (user setTemporaryPassword instead)\n     * Set password for the given login ID of user.\n     * Note: The password will automatically be set as expired.\n     * The user will not be able to log-in with this password, and will be required to replace it on next login.\n     * See also: expirePassword\n     * @param loginId The login ID of the user\n     * @param password The password to set for the user\n     */\n    setPassword: (loginId: string, password: string): Promise<SdkResponse<never>> =>\n      transformResponse<never>(\n        httpClient.post(apiPaths.user.setPassword, { loginId, password }),\n        (data) => data,\n      ),\n\n    /**\n     * Expire password for the given login ID.\n     * Note: user sign-in with an expired password, the user will get an error with code.\n     * Use the `ResetPassword` or `ReplacePassword` methods to reset/replace the password.\n     * @param loginId The login ID of the user\n     */\n    expirePassword: (loginId: string): Promise<SdkResponse<never>> =>\n      transformResponse<never>(\n        httpClient.post(apiPaths.user.expirePassword, { loginId }),\n        (data) => data,\n      ),\n\n    /**\n     * Removes all registered passkeys (WebAuthn devices) for the user with the given login ID.\n     * Note: The user might not be able to login anymore if they have no other authentication\n     * methods or a verified email/phone.\n     * @param loginId The login ID of the user\n     */\n    removeAllPasskeys: (loginId: string): Promise<SdkResponse<never>> =>\n      transformResponse<never>(\n        httpClient.post(apiPaths.user.removeAllPasskeys, { loginId }),\n        (data) => data,\n      ),\n\n    /**\n     * Removes TOTP seed for the user with the given login ID.\n     * Note: The user might not be able to login anymore if they have no other authentication\n     * methods or a verified email/phone.\n     * @param loginId The login ID of the user\n     */\n    removeTOTPSeed: (loginId: string): Promise<SdkResponse<never>> =>\n      transformResponse<never>(\n        httpClient.post(apiPaths.user.removeTOTPSeed, { loginId }),\n        (data) => data,\n      ),\n\n    /**\n     * Retrieve users' authentication history, by the given user's ids.\n     * @param userIds The user IDs\n     */\n    history: (userIds: string[]): Promise<SdkResponse<UserHistoryResponse[]>> =>\n      transformResponse<UserHistoryResponse[]>(\n        httpClient.post(apiPaths.user.history, userIds),\n        (data) => data,\n      ),\n  };\n};\n\nexport interface PatchUserOptions {\n  email?: string;\n  phone?: string;\n  displayName?: string;\n  roles?: string[];\n  userTenants?: AssociatedTenant[];\n  customAttributes?: Record<string, AttributesTypes>;\n  picture?: string;\n  verifiedEmail?: boolean;\n  verifiedPhone?: boolean;\n  givenName?: string;\n  middleName?: string;\n  familyName?: string;\n  ssoAppIds?: string[];\n  scim?: boolean;\n}\n\nexport default withUser;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport {\n  CloneProjectResponse,\n  ExportSnapshotResponse,\n  ImportSnapshotRequest,\n  Project,\n  ProjectEnvironment,\n  ValidateSnapshotRequest,\n  ValidateSnapshotResponse,\n} from './types';\n\ntype ListProjectsResponse = {\n  projects: Project[];\n};\n\nconst withProject = (httpClient: HttpClient) => ({\n  /**\n   * Update the current project name.\n   * @param name The new name of the project\n   */\n  updateName: (name: string): Promise<SdkResponse<never>> =>\n    transformResponse(\n      httpClient.post(apiPaths.project.updateName, {\n        name,\n      }),\n    ),\n\n  /**\n   * Update the current project tags.\n   * @param tags The wanted tags\n   */\n  updateTags: (tags: string[]): Promise<SdkResponse<never>> =>\n    transformResponse(\n      httpClient.post(apiPaths.project.updateTags, {\n        tags,\n      }),\n    ),\n  /**\n   * Clone the current project, including its settings and configurations.\n   *  - This action is supported only with a pro license or above.\n   *  - Users, tenants and access keys are not cloned.\n   * @param name The name of the new project\n   * @param environment Determine if the project is in production or not.\n   * @param tags array of free text tags\n   * @returns The new project details (name, id, environment and tags)\n   */\n  clone: (\n    name: string,\n    environment?: ProjectEnvironment,\n    tags?: string[],\n  ): Promise<SdkResponse<CloneProjectResponse>> =>\n    transformResponse(\n      httpClient.post(apiPaths.project.clone, {\n        name,\n        environment,\n        tags,\n      }),\n    ),\n\n  /**\n   * list of all the projects in the company\n   * @returns List of projects details (name, id, environment and tags)\n   */\n  listProjects: async (): Promise<SdkResponse<Project[]>> =>\n    transformResponse<ListProjectsResponse, Project[]>(\n      httpClient.post(apiPaths.project.projectsList, {}),\n      (data) =>\n        data.projects.map(({ id, name, environment, tags }) => ({\n          id,\n          name,\n          environment,\n          tags,\n        })),\n    ),\n\n  /**\n   *\n   * Exports a snapshot of all the settings and configurations for a project and returns\n   * the raw JSON files as a mape. Note that users, tenants and access keys are not exported.\n   *\n   * This call is supported only with a pro license or above.\n   *\n   * Note: The values for secrets such as tokens and keys are left blank in the snapshot.\n   * When a snapshot is imported into a project, the secrets for entities that already\n   * exist such as connectors or OAuth providers are preserved if the matching values\n   * in the snapshot are left blank. See below for more details.\n   *\n   * This API is meant to be used via the 'descope' CLI tool that can be\n   * found at https://github.com/descope/descopecli\n   *\n   * @returns An `ExportSnapshotResponse` object containing the exported JSON files.\n   */\n  exportSnapshot: (): Promise<SdkResponse<ExportSnapshotResponse>> =>\n    transformResponse(httpClient.post(apiPaths.project.exportSnapshot, {})),\n\n  /**\n   * Imports a snapshot of all settings and configurations into a project, overriding any\n   * current configuration.\n   *\n   * This call is supported only with a pro license or above.\n   *\n   * The request is expected to be an `ImportSnapshotRequest` object with a raw JSON map of\n   * files in the same format as the one returned in the `files` field of an `exportSnapshot`\n   * response.\n   *\n   * Note: The values for secrets such as tokens and keys are left blank in exported\n   * snapshots. When a snapshot is imported into a project, the secrets for entities that\n   * already exist such as connectors or OAuth providers are preserved if the matching values\n   * in the snapshot are left blank. However, new entities that need to be created during\n   * the import operation must any required secrets provided in the request, otherwise the\n   * import operation will fail. The ValidateImport method can be used to get a human and\n   * machine readable JSON of missing secrets that be passed to the ImportSnapshot call.\n   *\n   * This API is meant to be used via the 'descope' CLI tool that can be\n   * found at https://github.com/descope/descopecli\n   */\n  importSnapshot: (request: ImportSnapshotRequest): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.project.importSnapshot, request)),\n\n  /**\n   * Validates a snapshot by performing an import dry run and reporting any validation\n   * failures or missing data. This should be called right before `importSnapshot` to\n   * minimize the risk of the import failing.\n   *\n   * This call is supported only with a pro license or above.\n   *\n   * The response will have `ok: true` if the validation passes. Otherwise, a list of\n   * failures will be provided in the `failures` field, and any missing secrets will\n   * be listed along with details about which entity requires them.\n   *\n   * Validation can be retried by setting the required cleartext secret values in the\n   * `value` field of each missing secret and setting this object as the `inputSecrets`\n   * field of the validate request. The same `inputSecrets` object should then be\n   * provided to the `importSnapshot` call afterwards so it doesn't fail as well.\n   *\n   * This API is meant to be used via the 'descope' CLI tool that can be\n   * found at https://github.com/descope/descopecli\n   */\n  validateSnapshot: (\n    request: ValidateSnapshotRequest,\n  ): Promise<SdkResponse<ValidateSnapshotResponse>> =>\n    transformResponse(httpClient.post(apiPaths.project.validateSnapshot, request)),\n\n  /**\n   * @deprecated Use exportSnapshot instead\n   */\n  export: (): Promise<SdkResponse<Record<string, any>>> =>\n    transformResponse(httpClient.post(apiPaths.project.exportSnapshot, {}), (data) => data.files),\n\n  /**\n   * @deprecated Use importSnapshot instead\n   */\n  import: (files: Record<string, any>): Promise<SdkResponse<never>> =>\n    transformResponse(\n      httpClient.post(apiPaths.project.importSnapshot, {\n        files,\n      }),\n    ),\n});\n\nexport default withProject;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport {\n  CreateTenantResponse,\n  Tenant,\n  AttributesTypes,\n  TenantSettings,\n  GenerateSSOConfigurationLinkResponse,\n} from './types';\n\ntype MultipleTenantResponse = {\n  tenants: Tenant[];\n};\n\nconst withTenant = (httpClient: HttpClient) => ({\n  create: (\n    name: string,\n    selfProvisioningDomains?: string[],\n    customAttributes?: Record<string, AttributesTypes>,\n    enforceSSO?: boolean,\n    disabled?: boolean,\n  ): Promise<SdkResponse<CreateTenantResponse>> =>\n    transformResponse(\n      httpClient.post(apiPaths.tenant.create, {\n        name,\n        selfProvisioningDomains,\n        customAttributes,\n        enforceSSO,\n        disabled,\n      }),\n    ),\n  createWithId: (\n    id: string,\n    name: string,\n    selfProvisioningDomains?: string[],\n    customAttributes?: Record<string, AttributesTypes>,\n    enforceSSO?: boolean,\n    disabled?: boolean,\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      httpClient.post(apiPaths.tenant.create, {\n        id,\n        name,\n        selfProvisioningDomains,\n        customAttributes,\n        enforceSSO,\n        disabled,\n      }),\n    ),\n  update: (\n    id: string,\n    name: string,\n    selfProvisioningDomains?: string[],\n    customAttributes?: Record<string, AttributesTypes>,\n    enforceSSO?: boolean,\n    disabled?: boolean,\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      httpClient.post(apiPaths.tenant.update, {\n        id,\n        name,\n        selfProvisioningDomains,\n        customAttributes,\n        enforceSSO,\n        disabled,\n      }),\n    ),\n  delete: (id: string, cascade?: boolean): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.tenant.delete, { id, cascade })),\n  load: (id: string): Promise<SdkResponse<Tenant>> =>\n    transformResponse<Tenant, Tenant>(\n      httpClient.get(apiPaths.tenant.load, {\n        queryParams: { id },\n      }),\n      (data) => data,\n    ),\n  loadAll: (): Promise<SdkResponse<Tenant[]>> =>\n    transformResponse<MultipleTenantResponse, Tenant[]>(\n      httpClient.get(apiPaths.tenant.loadAll, {}),\n      (data) => data.tenants,\n    ),\n  searchAll: (\n    ids?: string[],\n    names?: string[],\n    selfProvisioningDomains?: string[],\n    customAttributes?: Record<string, AttributesTypes>,\n  ): Promise<SdkResponse<Tenant[]>> =>\n    transformResponse<MultipleTenantResponse, Tenant[]>(\n      httpClient.post(apiPaths.tenant.searchAll, {\n        tenantIds: ids,\n        tenantNames: names,\n        tenantSelfProvisioningDomains: selfProvisioningDomains,\n        customAttributes,\n      }),\n      (data) => data.tenants,\n    ),\n  getSettings: (tenantId: string): Promise<SdkResponse<TenantSettings>> =>\n    transformResponse<TenantSettings, TenantSettings>(\n      httpClient.get(apiPaths.tenant.settings, {\n        queryParams: { id: tenantId },\n      }),\n      (data) => data,\n    ),\n  configureSettings: (tenantId: string, settings: TenantSettings): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.tenant.settings, { ...settings, tenantId }, {})),\n  generateSSOConfigurationLink: (\n    tenantId: string,\n    expireDuration: number,\n    ssoId?: string,\n    email?: string,\n    templateId?: string,\n  ): Promise<SdkResponse<GenerateSSOConfigurationLinkResponse>> =>\n    transformResponse<GenerateSSOConfigurationLinkResponse, GenerateSSOConfigurationLinkResponse>(\n      httpClient.post(\n        apiPaths.tenant.generateSSOConfigurationLink,\n        { tenantId, expireTime: expireDuration, ssoId, email, templateId },\n        {},\n      ),\n      (data) => data,\n    ),\n});\n\nexport default withTenant;\n","import { JWTResponse, SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport {\n  MgmtLoginOptions,\n  MgmtSignUpOptions,\n  MgmtUserOptions,\n  UpdateJWTResponse,\n  ClientAssertionResponse,\n} from './types';\n\ntype AnonymousJWTResponse = Omit<JWTResponse, 'user' | 'firstSeen'>;\n\nconst withJWT = (httpClient: HttpClient) => ({\n  update: (\n    jwt: string,\n    customClaims?: Record<string, any>,\n    refreshDuration?: number,\n  ): Promise<SdkResponse<UpdateJWTResponse>> =>\n    transformResponse(httpClient.post(apiPaths.jwt.update, { jwt, customClaims, refreshDuration })),\n  impersonate: (\n    impersonatorId: string,\n    loginId: string,\n    validateConsent: boolean,\n    customClaims?: Record<string, any>,\n    selectedTenant?: string,\n    refreshDuration?: number,\n  ): Promise<SdkResponse<UpdateJWTResponse>> =>\n    transformResponse(\n      httpClient.post(apiPaths.jwt.impersonate, {\n        impersonatorId,\n        loginId,\n        validateConsent,\n        customClaims,\n        selectedTenant,\n        refreshDuration,\n      }),\n    ),\n  stopImpersonation: (\n    jwt: string,\n    customClaims?: Record<string, any>,\n    selectedTenant?: string,\n    refreshDuration?: number,\n  ): Promise<SdkResponse<UpdateJWTResponse>> =>\n    transformResponse(\n      httpClient.post(apiPaths.jwt.stopImpersonation, {\n        jwt,\n        customClaims,\n        selectedTenant,\n        refreshDuration,\n      }),\n    ),\n  signIn: (loginId: string, loginOptions?: MgmtLoginOptions): Promise<SdkResponse<JWTResponse>> =>\n    transformResponse(httpClient.post(apiPaths.jwt.signIn, { loginId, ...loginOptions })),\n  signUp: (\n    loginId: string,\n    user?: MgmtUserOptions,\n    signUpOptions?: MgmtSignUpOptions,\n  ): Promise<SdkResponse<JWTResponse>> =>\n    transformResponse(httpClient.post(apiPaths.jwt.signUp, { loginId, user, ...signUpOptions })),\n  signUpOrIn: (\n    loginId: string,\n    user?: MgmtUserOptions,\n    signUpOptions?: MgmtSignUpOptions,\n  ): Promise<SdkResponse<JWTResponse>> =>\n    transformResponse(\n      httpClient.post(apiPaths.jwt.signUpOrIn, { loginId, user, ...signUpOptions }),\n    ),\n  anonymous: (\n    customClaims?: Record<string, any>,\n    selectedTenant?: string,\n    refreshDuration?: number,\n  ): Promise<SdkResponse<AnonymousJWTResponse>> =>\n    transformResponse(\n      httpClient.post(apiPaths.jwt.anonymous, { customClaims, selectedTenant, refreshDuration }),\n    ),\n  generateClientAssertionJwt: (\n    issuer: string,\n    subject: string,\n    audience: string[],\n    expiresIn: number,\n  ): Promise<SdkResponse<ClientAssertionResponse>> =>\n    transformResponse(\n      httpClient.post(apiPaths.jwt.clientAssertion, { issuer, subject, audience, expiresIn }),\n    ),\n});\n\nexport default withJWT;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport { Permission } from './types';\n\ntype MultiplePermissionResponse = {\n  permissions: Permission[];\n};\n\nconst withPermission = (httpClient: HttpClient) => ({\n  create: (name: string, description?: string): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.permission.create, { name, description })),\n  update: (name: string, newName: string, description?: string): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.permission.update, { name, newName, description })),\n  delete: (name: string): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.permission.delete, { name })),\n  loadAll: (): Promise<SdkResponse<Permission[]>> =>\n    transformResponse<MultiplePermissionResponse, Permission[]>(\n      httpClient.get(apiPaths.permission.loadAll, {}),\n      (data) => data.permissions,\n    ),\n});\n\nexport default withPermission;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport { Role, RoleSearchOptions } from './types';\n\ntype MultipleRoleResponse = {\n  roles: Role[];\n};\n\nconst withRole = (httpClient: HttpClient) => ({\n  create: (\n    name: string,\n    description?: string,\n    permissionNames?: string[],\n    tenantId?: string,\n    defaultRole?: boolean,\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      httpClient.post(apiPaths.role.create, {\n        name,\n        description,\n        permissionNames,\n        tenantId,\n        default: defaultRole,\n      }),\n    ),\n  update: (\n    name: string,\n    newName: string,\n    description?: string,\n    permissionNames?: string[],\n    tenantId?: string,\n    defaultRole?: boolean,\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      httpClient.post(apiPaths.role.update, {\n        name,\n        newName,\n        description,\n        permissionNames,\n        tenantId,\n        default: defaultRole,\n      }),\n    ),\n  delete: (name: string, tenantId?: string): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.role.delete, { name, tenantId })),\n  loadAll: (): Promise<SdkResponse<Role[]>> =>\n    transformResponse<MultipleRoleResponse, Role[]>(\n      httpClient.get(apiPaths.role.loadAll, {}),\n      (data) => data.roles,\n    ),\n  search: (options: RoleSearchOptions): Promise<SdkResponse<Role[]>> =>\n    transformResponse<MultipleRoleResponse, Role[]>(\n      httpClient.post(apiPaths.role.search, options, {}),\n      (data) => data.roles,\n    ),\n});\n\nexport default withRole;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport { Group } from './types';\n\nconst withGroup = (httpClient: HttpClient) => ({\n  /**\n   * Load all groups for a specific tenant id.\n   * @param tenantId Tenant ID to load groups from.\n   * @returns Group[] list of groups\n   */\n  loadAllGroups: (tenantId: string): Promise<SdkResponse<Group[]>> =>\n    transformResponse<Group[]>(httpClient.post(apiPaths.group.loadAllGroups, { tenantId })),\n\n  /**\n   * Load all groups for the provided user IDs or login IDs.\n   * @param tenantId Tenant ID to load groups from.\n   * @param userIds Optional List of user IDs, with the format of \"U2J5ES9S8TkvCgOvcrkpzUgVTEBM\" (example), which can be found on the user's JWT.\n   * @param loginIds Optional List of login IDs, how the user identifies when logging in.\n   * @returns Group[] list of groups\n   */\n  loadAllGroupsForMember: (\n    tenantId: string,\n    userIds: string[],\n    loginIds: string[],\n  ): Promise<SdkResponse<Group[]>> =>\n    transformResponse<Group[]>(\n      httpClient.post(apiPaths.group.loadAllGroupsForMember, { tenantId, loginIds, userIds }),\n    ),\n\n  /**\n   * Load all members of the provided group id.\n   * @param tenantId Tenant ID to load groups from.\n   * @param groupId Group ID to load members for.\n   * @returns Group[] list of groups\n   */\n  loadAllGroupMembers: (tenantId: string, groupId: string): Promise<SdkResponse<Group[]>> =>\n    transformResponse<Group[]>(\n      httpClient.post(apiPaths.group.loadAllGroupMembers, { tenantId, groupId }),\n    ),\n});\n\nexport default withGroup;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport {\n  RoleMappings,\n  AttributeMapping,\n  SSOSettingsResponse,\n  SSOOIDCSettings,\n  SSOSAMLSettings,\n  SSOSAMLByMetadataSettings,\n  SSOSettings,\n} from './types';\n\nfunction transformSettingsResponse(data) {\n  const readySettings = data as any;\n  if (readySettings.oidc) {\n    readySettings.oidc = {\n      ...readySettings.oidc,\n      attributeMapping: readySettings.oidc.userAttrMapping,\n    };\n    delete readySettings.oidc.userAttrMapping;\n  }\n  if (readySettings.saml?.groupsMapping) {\n    readySettings.saml.groupsMapping = readySettings.saml?.groupsMapping.map((gm: any) => {\n      const rm = gm;\n      rm.roleName = rm.role.name;\n      delete rm.role;\n      return rm;\n    });\n  }\n  return readySettings;\n}\n\nfunction transformAllSettingsResponse(data) {\n  const readySettings = data.SSOSettings as any[];\n  const res = [];\n  readySettings.forEach((setting) => res.push(transformSettingsResponse(setting)));\n  return res;\n}\n\nconst withSSOSettings = (httpClient: HttpClient) => ({\n  /**\n   * @deprecated  Use loadSettings instead\n   */\n  getSettings: (tenantId: string): Promise<SdkResponse<SSOSettingsResponse>> =>\n    transformResponse<SSOSettingsResponse>(\n      httpClient.get(apiPaths.sso.settings, {\n        queryParams: { tenantId },\n      }),\n      (data) => data,\n    ),\n  newSettings: (\n    tenantId: string,\n    ssoId: string,\n    displayName: string,\n  ): Promise<SdkResponse<SSOSettings>> =>\n    transformResponse<SSOSettings>(\n      httpClient.post(apiPaths.sso.settingsNew, {\n        tenantId,\n        ...(ssoId ? { ssoId } : {}),\n        displayName,\n      }),\n      (data) => transformSettingsResponse(data),\n    ),\n  deleteSettings: (tenantId: string, ssoId?: string): Promise<SdkResponse<never>> =>\n    transformResponse(\n      httpClient.delete(apiPaths.sso.settings, {\n        queryParams: { tenantId, ...(ssoId ? { ssoId } : {}) },\n      }),\n    ),\n  /**\n   * @deprecated  Use configureSAMLSettings or configureOIDCSettings instead\n   */\n  configureSettings: (\n    tenantId: string,\n    idpURL: string,\n    idpCert: string,\n    entityId: string,\n    redirectURL: string,\n    domains: string[],\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      httpClient.post(apiPaths.sso.settings, {\n        tenantId,\n        idpURL,\n        entityId,\n        idpCert,\n        redirectURL,\n        domains,\n      }),\n    ),\n  /**\n   * @deprecated  Use configureSAMLByMetadata instead\n   */\n  configureMetadata: (\n    tenantId: string,\n    idpMetadataURL: string,\n    redirectURL: string,\n    domains: string[],\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      httpClient.post(apiPaths.sso.metadata, { tenantId, idpMetadataURL, redirectURL, domains }),\n    ),\n  /**\n   * @deprecated  Use configureSAMLSettings, configureSAMLByMetadata or configureOIDCSettings instead\n   */\n  configureMapping: (\n    tenantId: string,\n    roleMappings?: RoleMappings,\n    attributeMapping?: AttributeMapping,\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      httpClient.post(apiPaths.sso.mapping, { tenantId, roleMappings, attributeMapping }),\n    ),\n  configureOIDCSettings: (\n    tenantId: string,\n    settings: SSOOIDCSettings,\n    domains?: string[],\n    ssoId?: string,\n  ): Promise<SdkResponse<never>> => {\n    const readySettings = { ...settings, userAttrMapping: settings.attributeMapping };\n    delete readySettings.attributeMapping;\n    return transformResponse(\n      httpClient.post(apiPaths.sso.oidc.configure, {\n        tenantId,\n        settings: readySettings,\n        domains,\n        ...(ssoId ? { ssoId } : {}),\n      }),\n    );\n  },\n  configureSAMLSettings: (\n    tenantId: string,\n    settings: SSOSAMLSettings,\n    redirectUrl?: string,\n    domains?: string[],\n    ssoId?: string,\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      httpClient.post(apiPaths.sso.saml.configure, {\n        tenantId,\n        settings,\n        redirectUrl,\n        domains,\n        ...(ssoId ? { ssoId } : {}),\n      }),\n    ),\n  configureSAMLByMetadata: (\n    tenantId: string,\n    settings: SSOSAMLByMetadataSettings,\n    redirectUrl?: string,\n    domains?: string[],\n    ssoId?: string,\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      httpClient.post(apiPaths.sso.saml.metadata, {\n        tenantId,\n        settings,\n        redirectUrl,\n        domains,\n        ...(ssoId ? { ssoId } : {}),\n      }),\n    ),\n  loadSettings: (tenantId: string, ssoId?: string): Promise<SdkResponse<SSOSettings>> =>\n    transformResponse<SSOSettings>(\n      httpClient.get(apiPaths.sso.settingsv2, {\n        queryParams: { tenantId, ...(ssoId ? { ssoId } : {}) },\n      }),\n      (data) => transformSettingsResponse(data),\n    ),\n  loadAllSettings: (tenantId: string): Promise<SdkResponse<SSOSettings[]>> =>\n    transformResponse<SSOSettings[]>(\n      httpClient.get(apiPaths.sso.settingsAllV2, {\n        queryParams: { tenantId },\n      }),\n      (data) => transformAllSettingsResponse(data),\n    ),\n});\n\nexport default withSSOSettings;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport { AccessKey, AssociatedTenant, CreatedAccessKeyResponse } from './types';\n\ntype SingleKeyResponse = {\n  key: AccessKey;\n};\n\ntype MultipleKeysResponse = {\n  keys: AccessKey[];\n};\n\nconst withAccessKey = (httpClient: HttpClient) => ({\n  /**\n   * Create a new access key for a project.\n   * @param name Access key name\n   * @param expireTime When the access key expires. Keep at 0 to make it indefinite.\n   * @param roles Optional roles in the project. Does not apply for multi-tenants\n   * @param tenants Optional associated tenants for this key and its roles for each.\n   * @param userId Optional bind this access key to a specific user.\n   * @param customClaims Optional map of claims and their values that will be present in the JWT.\n   * @param description Optional free text description\n   * @param permittedIps Optional list of IP addresses or CIDR ranges that are allowed to use this access key.\n   * @returns A newly created key and its cleartext. Make sure to save the cleartext securely.\n   */\n  create: (\n    name: string,\n    expireTime: number,\n    roles?: string[],\n    tenants?: AssociatedTenant[],\n    userId?: string,\n    customClaims?: Record<string, any>,\n    description?: string,\n    permittedIps?: string[],\n  ): Promise<SdkResponse<CreatedAccessKeyResponse>> =>\n    transformResponse(\n      httpClient.post(apiPaths.accessKey.create, {\n        name,\n        expireTime,\n        roleNames: roles,\n        keyTenants: tenants,\n        userId,\n        customClaims,\n        description,\n        permittedIps,\n      }),\n    ),\n  /**\n   * Load an access key.\n   * @param id Access key ID to load\n   * @returns The loaded access key.\n   */\n  load: (id: string): Promise<SdkResponse<AccessKey>> =>\n    transformResponse<SingleKeyResponse, AccessKey>(\n      httpClient.get(apiPaths.accessKey.load, {\n        queryParams: { id },\n      }),\n      (data) => data.key,\n    ),\n  /**\n   * Search all access keys\n   * @param tenantIds Optional tenant ID filter to apply on the search results\n   * @returns An array of found access keys\n   */\n  searchAll: (tenantIds?: string[]): Promise<SdkResponse<AccessKey[]>> =>\n    transformResponse<MultipleKeysResponse, AccessKey[]>(\n      httpClient.post(apiPaths.accessKey.search, { tenantIds }),\n      (data) => data.keys,\n    ),\n  /**\n   * Update an access key.\n   * @param id Access key ID to load\n   * @param name The updated access key name\n   * @param description Optional updated access key description\n   * @param roles Optional roles in the project. Does not apply for multi-tenants\n   * @param tenants Optional associated tenants for this key and its roles for each.\n   * @param customClaims Optional map of claims and their values that will be present in the JWT.\n   * @param permittedIps Optional list of IP addresses or CIDR ranges that are allowed to use this access key.\n   * @returns The updated access key\n   */\n  update: (\n    id: string,\n    name: string,\n    description?: string,\n    roles?: string[],\n    tenants?: AssociatedTenant[],\n    customClaims?: Record<string, any>,\n    permittedIps?: string[],\n  ): Promise<SdkResponse<AccessKey>> =>\n    transformResponse<SingleKeyResponse, AccessKey>(\n      httpClient.post(apiPaths.accessKey.update, {\n        id,\n        name,\n        description,\n        roleNames: roles,\n        keyTenants: tenants,\n        customClaims,\n        permittedIps,\n      }),\n      (data) => data.key,\n    ),\n  /**\n   * Deactivate an access key. Deactivated access keys cannot be used until they are\n   * activated again.\n   * @param id Access key ID to deactivate\n   */\n  deactivate: (id: string): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.accessKey.deactivate, { id })),\n  /**\n   * Activate an access key. Only deactivated access keys can be activated again.\n   * @param id Access key ID to activate\n   */\n  activate: (id: string): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.accessKey.activate, { id })),\n  /**\n   * Delete an access key. IMPORTANT: This cannot be undone. Use carefully.\n   * @param id Access key ID to delete\n   */\n  delete: (id: string): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.accessKey.delete, { id })),\n});\n\nexport default withAccessKey;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport {\n  FlowResponse,\n  FlowsResponse,\n  Screen,\n  Flow,\n  ManagementFlowOptions,\n  RunManagementFlowResponse,\n} from './types';\n\nconst WithFlow = (httpClient: HttpClient) => ({\n  list: (): Promise<SdkResponse<FlowsResponse>> =>\n    transformResponse(httpClient.post(apiPaths.flow.list, {})),\n  delete: (flowIds: string[]): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.flow.delete, { ids: flowIds })),\n  export: (flowId: string): Promise<SdkResponse<FlowResponse>> =>\n    transformResponse(httpClient.post(apiPaths.flow.export, { flowId })),\n  import: (flowId: string, flow: Flow, screens?: Screen[]): Promise<SdkResponse<FlowResponse>> =>\n    transformResponse(httpClient.post(apiPaths.flow.import, { flowId, flow, screens })),\n  run: (\n    flowId: string,\n    options?: ManagementFlowOptions,\n  ): Promise<SdkResponse<RunManagementFlowResponse['output']>> =>\n    transformResponse(\n      httpClient.post(apiPaths.flow.run, { flowId, options }),\n      (data) => (data as RunManagementFlowResponse)?.output,\n    ),\n});\n\nexport default WithFlow;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport { Theme, ThemeResponse } from './types';\n\nconst WithTheme = (httpClient: HttpClient) => ({\n  export: (): Promise<SdkResponse<ThemeResponse>> =>\n    transformResponse(httpClient.post(apiPaths.theme.export, {})),\n  import: (theme: Theme): Promise<SdkResponse<ThemeResponse>> =>\n    transformResponse(httpClient.post(apiPaths.theme.import, { theme })),\n});\n\nexport default WithTheme;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport { AuditSearchOptions, AuditRecord, AuditCreateOptions } from './types';\n\nconst WithAudit = (httpClient: HttpClient) => ({\n  /**\n   * Search the audit trail for up to last 30 days based on given optional parameters\n   * @param searchOptions to filter which audit records to return\n   * @returns the audit records array\n   */\n  search: (searchOptions: AuditSearchOptions): Promise<SdkResponse<AuditRecord[]>> => {\n    const body = { ...searchOptions, externalIds: searchOptions.loginIds };\n    delete body.loginIds;\n    return transformResponse(httpClient.post(apiPaths.audit.search, body), (data) =>\n      data?.audits.map((a) => {\n        const res = {\n          ...a,\n          occurred: parseFloat(a.occurred),\n          loginIds: a.externalIds,\n        };\n        delete res.externalIds;\n        return res;\n      }),\n    );\n  },\n  /**\n   * Create audit event\n   * @param createOptions to define which audit event to create\n   * @returns the audit records array\n   */\n  createEvent: (createOptions: AuditCreateOptions): Promise<SdkResponse<never>> => {\n    const body = { ...createOptions };\n    return transformResponse(httpClient.post(apiPaths.audit.createEvent, body));\n  },\n});\n\nexport default WithAudit;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport {\n  AuthzSchema,\n  AuthzNamespace,\n  AuthzRelationDefinition,\n  AuthzRelation,\n  AuthzRelationQuery,\n  AuthzModified,\n  AuthzResource,\n} from './types';\n\nconst WithAuthz = (httpClient: HttpClient) => ({\n  /**\n   * Save (create or update) the given schema.\n   * In case of update, will update only given namespaces and will not delete namespaces unless upgrade flag is true.\n   * Schema name can be used for projects to track versioning.\n   *\n   * @param schema the schema to save\n   * @param upgrade should we upgrade existing schema or ignore any namespace not provided\n   * @returns standard success or failure response\n   */\n  saveSchema: (schema: AuthzSchema, upgrade: boolean): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.authz.schemaSave, { schema, upgrade })),\n  /**\n   * Delete the schema for the project which will also delete all relations.\n   *\n   * @returns standard success or failure response\n   */\n  deleteSchema: (): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.authz.schemaDelete, {})),\n  /**\n   * Load the schema for the project.\n   *\n   * @returns the schema associated with the project\n   */\n  loadSchema: (): Promise<SdkResponse<AuthzSchema>> =>\n    transformResponse(httpClient.post(apiPaths.authz.schemaLoad, {}), (data) => data.schema),\n  /**\n   * Save (create or update) the given namespace.\n   * Will not delete relation definitions not mentioned in the namespace.\n   *\n   * @param namespace the namespace to save\n   * @param oldName if we are changing the namespace name, what was the old name we are updating.\n   * @param schemaName optional and used to track the current schema version.\n   * @returns standard success or failure response\n   */\n  saveNamespace: (\n    namespace: AuthzNamespace,\n    oldName?: string,\n    schemaName?: string,\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.authz.nsSave, { namespace, oldName, schemaName })),\n  /**\n   * Delete the given namespace.\n   * Will also delete the relevant relations.\n   *\n   * @param name to delete.\n   * @param schemaName optional and used to track the current schema version.\n   * @returns standard success or failure response\n   */\n  deleteNamespace: (name: string, schemaName?: string): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.authz.nsDelete, { name, schemaName })),\n  /**\n   * Save (create or update) the given relation definition.\n   *\n   * @param relationDefinition rd to save.\n   * @param namespace that it belongs to.\n   * @param oldName if we are changing the relation definition name, what was the old name we are updating.\n   * @param schemaName optional and used to track the current schema version.\n   * @returns standard success or failure response\n   */\n  saveRelationDefinition: (\n    relationDefinition: AuthzRelationDefinition,\n    namespace: string,\n    oldName?: string,\n    schemaName?: string,\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      httpClient.post(apiPaths.authz.rdSave, {\n        relationDefinition,\n        namespace,\n        oldName,\n        schemaName,\n      }),\n    ),\n  /**\n   * Delete the given relation definition.\n   * Will also delete the relevant relations.\n   *\n   * @param name to delete.\n   * @param namespace it belongs to.\n   * @param schemaName optional and used to track the current schema version.\n   * @returns standard success or failure response\n   */\n  deleteRelationDefinition: (\n    name: string,\n    namespace: string,\n    schemaName?: string,\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.authz.rdDelete, { name, namespace, schemaName })),\n  /**\n   * Create the given relations.\n   *\n   * @param relations to create.\n   * @returns standard success or failure response\n   */\n  createRelations: (relations: AuthzRelation[]): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.authz.reCreate, { relations })),\n  /**\n   * Delete the given relations.\n   *\n   * @param relations to delete.\n   * @returns standard success or failure response\n   */\n  deleteRelations: (relations: AuthzRelation[]): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.authz.reDelete, { relations })),\n  /**\n   * @deprecated use `deleteRelationsForIds` instead for better clarity\n   *\n   * Delete any relations with matching resourceIds OR targetIds\n   *\n   * @param resources ids to delete relations for.\n   * @returns standard success or failure response\n   */\n  deleteRelationsForResources: (resources: string[]): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.authz.reDeleteResources, { resources })),\n  /**\n   *\n   * Delete any relations with matching resourceIds\n   *\n   * @param resources resource ids to delete relations for.\n   * @returns\n   */\n  deleteResourceRelationsForResources: (resources: string[]): Promise<SdkResponse<never>> =>\n    transformResponse(\n      httpClient.post(apiPaths.authz.reDeleteResourceRelationsForResources, { resources }),\n    ),\n  /**\n   * Delete any relations with matching resourceIds OR targetIds\n   *\n   * @param ids ids to delete relations for.\n   * @returns standard success or failure response\n   */\n  deleteRelationsForIds: (ids: string[]): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.authz.reDeleteResources, { resources: ids })),\n  /**\n   * Query relations to see what relations exists.\n   *\n   * @param relationQueries array of relation queries to check.\n   * @returns array of relation query responses with the boolean flag indicating if relation exists\n   */\n  hasRelations: (\n    relationQueries: AuthzRelationQuery[],\n  ): Promise<SdkResponse<AuthzRelationQuery[]>> =>\n    transformResponse(\n      httpClient.post(apiPaths.authz.hasRelations, { relationQueries }),\n      (data) => data.relationQueries,\n    ),\n  /**\n   * List all the users that have the given relation definition to the given resource.\n   *\n   * @param resource The resource we are checking\n   * @param relationDefinition The relation definition we are querying\n   * @param namespace The namespace for the relation definition\n   * @returns array of users who have the given relation definition\n   */\n  whoCanAccess: (\n    resource: string,\n    relationDefinition: string,\n    namespace: string,\n  ): Promise<SdkResponse<string[]>> =>\n    transformResponse(\n      httpClient.post(apiPaths.authz.who, { resource, relationDefinition, namespace }),\n      (data) => data.targets,\n    ),\n  /**\n   * Return the list of all defined relations (not recursive) on the given resource.\n   *\n   * @param resource The resource we are checking\n   * @param ignoreTargetSetRelations if true, will not return target set relations even if they exist\n   * @returns array of relations that exist for the given resource\n   */\n  resourceRelations: (\n    resource: string,\n    ignoreTargetSetRelations = false,\n  ): Promise<SdkResponse<AuthzRelation[]>> =>\n    transformResponse(\n      httpClient.post(apiPaths.authz.resource, { resource, ignoreTargetSetRelations }),\n      (data) => data.relations,\n    ),\n  /**\n   * Return the list of all defined relations (not recursive) for the given targets.\n   *\n   * @param targets array of targets we want to check\n   * @param includeTargetSetRelations if true, will include target set relations as well as target relations\n   * @returns array of relations that exist for the given targets\n   */\n  targetsRelations: (\n    targets: string[],\n    includeTargetSetRelations = false,\n  ): Promise<SdkResponse<AuthzRelation[]>> =>\n    transformResponse(\n      httpClient.post(apiPaths.authz.targets, { targets, includeTargetSetRelations }),\n      (data) => data.relations,\n    ),\n  /**\n   * Return the list of all relations for the given target including derived relations from the schema tree.\n   *\n   * @param target The target to check relations for\n   * @returns array of relations that exist for the given targets\n   */\n  whatCanTargetAccess: (target: string): Promise<SdkResponse<AuthzRelation[]>> =>\n    transformResponse(\n      httpClient.post(apiPaths.authz.targetAll, { target }),\n      (data) => data.relations,\n    ),\n\n  /**\n   * Return all resources which the target can access via relation paths that end with the given relation definition\n   *\n   * @param target The target to check resource access for, e.g. user:123\n   * @param relationDefinition A relation on a resource, e.g. owner\n   * @param namespace The namespace (type) of the resource in which the relation is defined, e.g. folder\n   * @returns array of resources that the target can access on relation paths which include the given relation definition\n   */\n  whatCanTargetAccessWithRelation: (\n    target: string,\n    relationDefinition: string,\n    namespace: string,\n  ): Promise<SdkResponse<AuthzResource[]>> =>\n    transformResponse(\n      httpClient.post(apiPaths.authz.targetWithRelation, { target, relationDefinition, namespace }),\n      (data) => data.resources.map((resource: string) => ({ resource })),\n    ),\n\n  /**\n   * Return the list of all relations for the given target including derived relations from the schema tree.\n   *\n   * @param target The target to check relations for\n   * @returns array of relations that exist for the given targets\n   */\n  getModified: (since: Date): Promise<SdkResponse<AuthzModified>> =>\n    transformResponse(\n      httpClient.post(apiPaths.authz.getModified, { since: since ? since.getTime() : 0 }),\n      (data) => data as AuthzModified,\n    ),\n});\n\nexport default WithAuthz;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport {\n  CreateSSOApplicationResponse,\n  SSOApplication,\n  OidcApplicationOptions,\n  SamlApplicationOptions,\n} from './types';\n\ntype MultipleSSOApplicationResponse = {\n  apps: SSOApplication[];\n};\n\nconst withSSOApplication = (httpClient: HttpClient) => ({\n  createOidcApplication: (\n    options: OidcApplicationOptions,\n  ): Promise<SdkResponse<CreateSSOApplicationResponse>> =>\n    transformResponse(\n      httpClient.post(apiPaths.ssoApplication.oidcCreate, {\n        ...options,\n        enabled: options.enabled ?? true,\n      }),\n    ),\n  createSamlApplication: (\n    options: SamlApplicationOptions,\n  ): Promise<SdkResponse<CreateSSOApplicationResponse>> =>\n    transformResponse(\n      httpClient.post(apiPaths.ssoApplication.samlCreate, {\n        ...options,\n        enabled: options.enabled ?? true,\n      }),\n    ),\n  updateOidcApplication: (\n    options: OidcApplicationOptions & { id: string },\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.ssoApplication.oidcUpdate, { ...options })),\n  updateSamlApplication: (\n    options: SamlApplicationOptions & { id: string },\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.ssoApplication.samlUpdate, { ...options })),\n  delete: (id: string): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.ssoApplication.delete, { id })),\n  load: (id: string): Promise<SdkResponse<SSOApplication>> =>\n    transformResponse<SSOApplication, SSOApplication>(\n      httpClient.get(apiPaths.ssoApplication.load, {\n        queryParams: { id },\n      }),\n      (data) => data,\n    ),\n  loadAll: (): Promise<SdkResponse<SSOApplication[]>> =>\n    transformResponse<MultipleSSOApplicationResponse, SSOApplication[]>(\n      httpClient.get(apiPaths.ssoApplication.loadAll, {}),\n      (data) => data.apps,\n    ),\n});\n\nexport default withSSOApplication;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport { PasswordSettings } from './types';\n\nconst withPassword = (httpClient: HttpClient) => ({\n  getSettings: (tenantId: string): Promise<SdkResponse<PasswordSettings>> =>\n    transformResponse<PasswordSettings, PasswordSettings>(\n      httpClient.get(apiPaths.password.settings, {\n        queryParams: { tenantId },\n      }),\n      (data) => data,\n    ),\n  configureSettings: (tenantId: string, settings: PasswordSettings): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.password.settings, { ...settings, tenantId })),\n});\n\nexport default withPassword;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport {\n  CheckResponseRelation,\n  FGARelation,\n  FGASchema,\n  FGAResourceDetails,\n  FGAResourceIdentifier,\n} from './types';\n\nconst WithFGA = (httpClient: HttpClient) => ({\n  /**\n   * Save (create or update) the given schema.\n   * In case of update, will update only given namespaces and will not delete namespaces unless upgrade flag is true.\n   *\n   * @param schema the schema to save\n   * @returns standard success or failure response\n   */\n  saveSchema: (schema: FGASchema): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.fga.schema, schema)),\n  /**\n   * Delete the schema for the project which will also delete all relations.\n   *\n   * @returns standard success or failure response\n   */\n  deleteSchema: (): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.authz.schemaDelete, {})),\n  /**\n   * Create the given relations.\n   *\n   * @param relations to create.\n   * @returns standard success or failure response\n   */\n  createRelations: (relations: FGARelation[]): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.fga.relations, { tuples: relations })),\n\n  /**\n   * Delete the given relations.\n   * This is a bulk operation and will delete all the given relations.\n   *\n   * @param relations to delete.\n   * @returns standard success or failure response\n   */\n\n  deleteRelations: (relations: FGARelation[]): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.fga.deleteRelations, { tuples: relations })),\n\n  /**\n   * Check if the given relations exist.\n   * This is a read-only operation and will not create any relations.\n   * It will return the relations with the boolean flag indicating if relation exists.\n   * This is useful to check if a relation exists before creating it.\n   *\n   * @param relations to check.\n   * @returns array of relations with the boolean flag indicating if relation exists\n   */\n  check: (relations: FGARelation[]): Promise<SdkResponse<CheckResponseRelation[]>> =>\n    transformResponse(\n      httpClient.post(apiPaths.fga.check, { tuples: relations }),\n      (data) => data.tuples,\n    ),\n\n  /**\n   * Load details for the given resource identifiers.\n   * @param resourceIdentifiers the resource identifiers (resourceId and resourceType tuples) to load details for\n   */\n  loadResourcesDetails: (\n    resourceIdentifiers: FGAResourceIdentifier[],\n  ): Promise<SdkResponse<FGAResourceDetails[]>> =>\n    transformResponse(\n      httpClient.post(apiPaths.fga.resourcesLoad, { resourceIdentifiers }),\n      (data) => data.resourcesDetails,\n    ),\n\n  /**\n   * Save details for the given resources.\n   * @param resourcesDetails the resources details to save\n   */\n  saveResourcesDetails: (resourcesDetails: FGAResourceDetails[]): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.fga.resourcesSave, { resourcesDetails })),\n\n  /**\n   * Delete all relations.\n   *\n   * @returns standard success or failure response\n   */\n  deleteAllRelations: (): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.delete(apiPaths.fga.relations)),\n});\n\nexport default WithFGA;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport {\n  InboundApplication,\n  InboundApplicationConsent,\n  InboundApplicationConsentDeleteOptions,\n  InboundApplicationConsentSearchOptions,\n  CreateInboundApplicationResponse,\n  InboundApplicationOptions,\n  InboundApplicationSecretResponse,\n} from './types';\n\ntype MultipleInboundApplicationResponse = {\n  apps: InboundApplication[];\n};\n\ntype MultipleInboundApplicationConsentsResponse = {\n  consents: InboundApplicationConsent[];\n};\n\nconst withInboundApplication = (httpClient: HttpClient) => ({\n  createApplication: (\n    options: InboundApplicationOptions,\n  ): Promise<SdkResponse<CreateInboundApplicationResponse>> =>\n    transformResponse(\n      httpClient.post(apiPaths.inboundApplication.create, {\n        ...options,\n      }),\n    ),\n  updateApplication: (\n    options: InboundApplicationOptions & { id: string },\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.inboundApplication.update, { ...options })),\n  patchApplication: (\n    options: Partial<InboundApplicationOptions> & { id: string },\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.inboundApplication.patch, { ...options })),\n  deleteApplication: (id: string): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.inboundApplication.delete, { id })),\n  loadApplication: (id: string): Promise<SdkResponse<InboundApplication>> =>\n    transformResponse<InboundApplication, InboundApplication>(\n      httpClient.get(apiPaths.inboundApplication.load, {\n        queryParams: { id },\n      }),\n      (data) => data,\n    ),\n  loadAllApplications: (): Promise<SdkResponse<InboundApplication[]>> =>\n    transformResponse<MultipleInboundApplicationResponse, InboundApplication[]>(\n      httpClient.get(apiPaths.inboundApplication.loadAll, {}),\n      (data) => data.apps,\n    ),\n  getApplicationSecret: (id: string): Promise<SdkResponse<InboundApplicationSecretResponse>> =>\n    transformResponse<InboundApplicationSecretResponse, InboundApplicationSecretResponse>(\n      httpClient.get(apiPaths.inboundApplication.secret, {\n        queryParams: { id },\n      }),\n      (data) => data,\n    ),\n  rotateApplicationSecret: (id: string): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.inboundApplication.rotate, { id })),\n  searchConsents: (\n    options?: InboundApplicationConsentSearchOptions,\n  ): Promise<SdkResponse<InboundApplicationConsent[]>> =>\n    transformResponse<MultipleInboundApplicationConsentsResponse, InboundApplicationConsent[]>(\n      httpClient.post(apiPaths.inboundApplicationConsents.search, { ...options }),\n      (data) => data.consents,\n    ),\n  deleteConsents: (options: InboundApplicationConsentDeleteOptions): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.inboundApplicationConsents.delete, { ...options })),\n});\n\nexport default withInboundApplication;\n","import { SdkResponse, transformResponse, HttpClient } from '@descope/core-js-sdk';\nimport apiPaths from './paths';\nimport {\n  OutboundApplication,\n  OutboundAppToken,\n  FetchOutboundAppTokenOptions,\n  OutboundAppTokenResponse,\n} from './types';\n\ntype OutboundApplicationResponse = {\n  app: OutboundApplication;\n};\n\ntype MultipleOutboundApplicationResponse = {\n  apps: OutboundApplication[];\n};\n\ntype WithOptional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nconst withOutboundApplication = (httpClient: HttpClient) => ({\n  createApplication: (\n    app: WithOptional<OutboundApplication, 'id'> & { clientSecret?: string },\n  ): Promise<SdkResponse<OutboundApplication>> =>\n    transformResponse<OutboundApplicationResponse, OutboundApplication>(\n      httpClient.post(apiPaths.outboundApplication.create, {\n        ...app,\n      }),\n      (data) => data.app,\n    ),\n  updateApplication: (\n    app: OutboundApplication & { clientSecret?: string },\n  ): Promise<SdkResponse<OutboundApplication>> =>\n    transformResponse<OutboundApplicationResponse, OutboundApplication>(\n      httpClient.post(apiPaths.outboundApplication.update, {\n        app,\n      }),\n      (data) => data.app,\n    ),\n  deleteApplication: (id: string): Promise<SdkResponse<never>> =>\n    transformResponse(httpClient.post(apiPaths.outboundApplication.delete, { id })),\n  loadApplication: (id: string): Promise<SdkResponse<OutboundApplication>> =>\n    transformResponse<OutboundApplicationResponse, OutboundApplication>(\n      httpClient.get(`${apiPaths.outboundApplication.load}/${id}`),\n      (data) => data.app,\n    ),\n  loadAllApplications: (): Promise<SdkResponse<OutboundApplication[]>> =>\n    transformResponse<MultipleOutboundApplicationResponse, OutboundApplication[]>(\n      httpClient.get(apiPaths.outboundApplication.loadAll, {}),\n      (data) => data.apps,\n    ),\n  fetchTokenByScopes: (\n    appId: string,\n    userId: string,\n    scopes: string[],\n    options?: FetchOutboundAppTokenOptions,\n    tenantId?: string,\n  ): Promise<SdkResponse<OutboundAppToken>> =>\n    transformResponse<OutboundAppTokenResponse, OutboundAppToken>(\n      httpClient.post(apiPaths.outboundApplication.fetchTokenByScopes, {\n        appId,\n        userId,\n        scopes,\n        options,\n        tenantId,\n      }),\n      (data) => data.token,\n    ),\n  fetchToken: (\n    appId: string,\n    userId: string,\n    tenantId?: string,\n    options?: FetchOutboundAppTokenOptions,\n  ): Promise<SdkResponse<OutboundAppToken>> =>\n    transformResponse<OutboundAppTokenResponse, OutboundAppToken>(\n      httpClient.post(apiPaths.outboundApplication.fetchToken, {\n        appId,\n        userId,\n        tenantId,\n        options,\n      }),\n      (data) => data.token,\n    ),\n  fetchTenantTokenByScopes: (\n    appId: string,\n    tenantId: string,\n    scopes: string[],\n    options?: FetchOutboundAppTokenOptions,\n  ): Promise<SdkResponse<OutboundAppToken>> =>\n    transformResponse<OutboundAppTokenResponse, OutboundAppToken>(\n      httpClient.post(apiPaths.outboundApplication.fetchTenantTokenByScopes, {\n        appId,\n        tenantId,\n        scopes,\n        options,\n      }),\n      (data) => data.token,\n    ),\n  fetchTenantToken: (\n    appId: string,\n    tenantId: string,\n    options?: FetchOutboundAppTokenOptions,\n  ): Promise<SdkResponse<OutboundAppToken>> =>\n    transformResponse<OutboundAppTokenResponse, OutboundAppToken>(\n      httpClient.post(apiPaths.outboundApplication.fetchTenantToken, {\n        appId,\n        tenantId,\n        options,\n      }),\n      (data) => data.token,\n    ),\n});\n\nexport default withOutboundApplication;\n","import createSdk, {\n  AccessKeyLoginOptions,\n  ExchangeAccessKeyResponse,\n  SdkResponse,\n  JWTResponse as CoreJWTResponse,\n  wrapWith,\n  createHttpClient,\n  RequestConfig,\n} from '@descope/core-js-sdk';\nimport { JWK, JWTHeaderParameters, KeyLike, errors, importJWK, jwtVerify } from 'jose';\nimport {\n  permissionsClaimName,\n  refreshTokenCookieName,\n  rolesClaimName,\n  sessionTokenCookieName,\n} from './constants';\nimport fetch from './fetch-polyfill';\nimport {\n  getAuthorizationClaimItems,\n  getCookieValue,\n  isUserAssociatedWithTenant,\n  withCookie,\n} from './helpers';\nimport withManagement from './management';\nimport { AuthenticationInfo, RefreshAuthenticationInfo } from './types';\nimport descopeErrors from './errors';\n\ndeclare const BUILD_VERSION: string;\n\n// Extend the type wrapped by withCookie\ntype JWTResponseWithCookies = CoreJWTResponse & {\n  cookies: string[];\n};\n\n/** Configuration arguments which include the Descope core SDK args and an optional management key */\ntype NodeSdkArgs = Parameters<typeof createSdk>[0] & {\n  managementKey?: string;\n  authManagementKey?: string;\n  publicKey?: string;\n};\n\nconst nodeSdk = ({ authManagementKey, managementKey, publicKey, ...config }: NodeSdkArgs) => {\n  const nodeHeaders = {\n    'x-descope-sdk-name': 'nodejs',\n    'x-descope-sdk-node-version': process?.versions?.node || '',\n    'x-descope-sdk-version': BUILD_VERSION,\n  };\n\n  const authSdkConfig = {\n    fetch,\n    ...config,\n    baseHeaders: {\n      ...config.baseHeaders,\n      ...nodeHeaders,\n    },\n    hooks: {\n      ...config.hooks,\n      beforeRequest: [\n        // auth requests append the auth management key if provided\n        (requestConfig: RequestConfig) => {\n          if (authManagementKey) {\n            // eslint-disable-next-line no-param-reassign\n            requestConfig.token = !requestConfig.token\n              ? authManagementKey\n              : `${requestConfig.token}:${authManagementKey}`;\n          }\n\n          return requestConfig;\n        },\n      ].concat(config.hooks?.beforeRequest || []),\n    },\n  };\n  const coreSdk = createSdk(authSdkConfig);\n\n  const { projectId, logger } = config;\n\n  const keys: Record<string, KeyLike | Uint8Array> = {};\n\n  /** Fetch the public keys (JWKs) from Descope for the configured project */\n  const fetchKeys = async () => {\n    if (publicKey) {\n      try {\n        const parsedKey = JSON.parse(publicKey);\n        const key = await importJWK(parsedKey);\n        return {\n          [parsedKey.kid]: key,\n        };\n      } catch (e) {\n        logger?.error('Failed to parse the provided public key', e);\n        throw new Error(`Failed to parse public key. Error: ${e}`);\n      }\n    }\n\n    const keysWrapper = await coreSdk.httpClient\n      .get(`v2/keys/${projectId}`)\n      .then((resp) => resp.json());\n    const publicKeys: JWK[] = keysWrapper.keys;\n    if (!Array.isArray(publicKeys)) return {};\n    const kidJwksPairs = await Promise.all(\n      publicKeys.map(async (key) => [key.kid, await importJWK(key)]),\n    );\n\n    return kidJwksPairs.reduce(\n      (acc, [kid, jwk]) => (kid ? { ...acc, [kid.toString()]: jwk } : acc),\n      {},\n    );\n  };\n\n  const mgmtSdkConfig = {\n    fetch,\n    ...config,\n    baseConfig: {\n      baseHeaders: {\n        ...config.baseHeaders,\n        ...nodeHeaders,\n      },\n    },\n    hooks: {\n      ...config.hooks,\n      beforeRequest: [\n        // management requests always use the management key as the token\n        (requestConfig: RequestConfig) => {\n          // eslint-disable-next-line no-param-reassign\n          requestConfig.token = managementKey;\n          return requestConfig;\n        },\n      ].concat(config.hooks?.beforeRequest || []),\n    },\n  };\n  const mgmtHttpClient = createHttpClient(mgmtSdkConfig);\n  const management = withManagement(mgmtHttpClient);\n\n  const sdk = {\n    ...coreSdk,\n\n    // Overrides core-sdk refresh, because the core-sdk exposes queryParams, which is for internal use only\n    refresh: async (token?: string, externalToken?: string) =>\n      coreSdk.refresh(token, undefined, externalToken),\n\n    /**\n     * Provides various APIs for managing a Descope project programmatically. A management key must\n     * be provided as an argument when initializing the SDK to use these APIs. Management keys can be\n     * generated in the Descope console.\n     */\n    management,\n\n    /** Get the key that can validate the given JWT KID in the header. Can retrieve the public key from local cache or from Descope. */\n    async getKey(header: JWTHeaderParameters): Promise<KeyLike | Uint8Array> {\n      if (!header?.kid) throw Error('header.kid must not be empty');\n\n      if (keys[header.kid]) return keys[header.kid];\n\n      // do we need to fetch once or every time?\n      Object.assign(keys, await fetchKeys());\n\n      if (!keys[header.kid]) throw Error('failed to fetch matching key');\n\n      return keys[header.kid];\n    },\n\n    /**\n     * Validate the given JWT with the right key and make sure the issuer is correct\n     * @param jwt the JWT string to parse and validate\n     * @returns AuthenticationInfo with the parsed token and JWT. Will throw an error if validation fails.\n     */\n    async validateJwt(jwt: string): Promise<AuthenticationInfo> {\n      // Do not hard-code the algo because library does not support `None` so all are valid\n      const res = await jwtVerify(jwt, sdk.getKey, { clockTolerance: 5 });\n      const token = res.payload;\n\n      if (token) {\n        token.iss = token.iss?.split('/').pop(); // support both url and project id as issuer\n        if (token.iss !== projectId) {\n          // We must do the verification here, since issuer can be either project ID or URL\n          throw new errors.JWTClaimValidationFailed(\n            'unexpected \"iss\" claim value',\n            'iss',\n            'check_failed',\n          );\n        }\n      }\n\n      return { jwt, token };\n    },\n\n    /**\n     * Validate an active session\n     * @param sessionToken session JWT to validate\n     * @returns AuthenticationInfo promise or throws Error if there is an issue with JWTs\n     */\n    async validateSession(sessionToken: string): Promise<AuthenticationInfo> {\n      if (!sessionToken) throw Error('session token is required for validation');\n\n      try {\n        const token = await sdk.validateJwt(sessionToken);\n        return token;\n      } catch (error) {\n        /* istanbul ignore next */\n        logger?.error('session validation failed', error);\n        throw Error(`session validation failed. Error: ${error}`);\n      }\n    },\n\n    /**\n     * Refresh the session using a refresh token.\n     * For session migration, use {@link sdk.refresh}.\n     *\n     * @param refreshToken refresh JWT to refresh the session with\n     * @returns RefreshAuthenticationInfo promise or throws Error if there is an issue with JWTs\n     */\n    async refreshSession(refreshToken: string): Promise<RefreshAuthenticationInfo> {\n      if (!refreshToken) throw Error('refresh token is required to refresh a session');\n\n      try {\n        await sdk.validateJwt(refreshToken);\n        const jwtResp = await sdk.refresh(refreshToken);\n        if (jwtResp.ok) {\n          // if refresh was successful, validate the new session JWT\n          const seesionJwt =\n            getCookieValue(\n              (jwtResp.data as JWTResponseWithCookies)?.cookies?.join(';'),\n              sessionTokenCookieName,\n            ) || jwtResp.data?.sessionJwt;\n          const token = await sdk.validateJwt(seesionJwt);\n          // add cookies to the token response if they exist\n          token.cookies = (jwtResp.data as JWTResponseWithCookies)?.cookies || [];\n          if (jwtResp.data?.refreshJwt) {\n            // if refresh returned a refresh JWT, add it to the response\n            (token as RefreshAuthenticationInfo).refreshJwt = jwtResp.data.refreshJwt;\n          }\n          return token;\n        }\n        /* istanbul ignore next */\n        throw Error(jwtResp.error?.errorMessage);\n      } catch (refreshTokenErr) {\n        /* istanbul ignore next */\n        logger?.error('refresh token validation failed', refreshTokenErr);\n        throw Error(`refresh token validation failed, Error: ${refreshTokenErr}`);\n      }\n    },\n\n    /**\n     * Validate session and refresh it if it expired\n     * @param sessionToken session JWT\n     * @param refreshToken refresh JWT\n     * @returns RefreshAuthenticationInfo promise or throws Error if there is an issue with JWTs\n     */\n    async validateAndRefreshSession(\n      sessionToken?: string,\n      refreshToken?: string,\n    ): Promise<RefreshAuthenticationInfo> {\n      if (!sessionToken && !refreshToken) throw Error('both session and refresh tokens are empty');\n\n      try {\n        const token = await sdk.validateSession(sessionToken);\n        return token;\n      } catch (error) {\n        /* istanbul ignore next */\n        logger?.log(`session validation failed with error ${error} - trying to refresh it`);\n      }\n\n      return sdk.refreshSession(refreshToken);\n    },\n\n    /**\n     * Exchange API key (access key) for a session key\n     * @param accessKey access key to exchange for a session JWT\n     * @param loginOptions Optional advanced controls over login parameters\n     * @returns AuthenticationInfo with session JWT data\n     */\n    async exchangeAccessKey(\n      accessKey: string,\n      loginOptions?: AccessKeyLoginOptions,\n    ): Promise<AuthenticationInfo> {\n      if (!accessKey) throw Error('access key must not be empty');\n\n      let resp: SdkResponse<ExchangeAccessKeyResponse>;\n      try {\n        resp = await sdk.accessKey.exchange(accessKey, loginOptions);\n      } catch (error) {\n        logger?.error('failed to exchange access key', error);\n        throw Error(`could not exchange access key - Failed to exchange. Error: ${error}`);\n      }\n\n      if (!resp.ok) {\n        logger?.error('failed to exchange access key', resp.error);\n        throw Error(`could not exchange access key - ${resp.error?.errorMessage}`);\n      }\n\n      const { sessionJwt } = resp.data;\n      if (!sessionJwt) {\n        logger?.error('failed to parse exchange access key response');\n        throw Error('could not exchange access key');\n      }\n\n      try {\n        const token = await sdk.validateJwt(sessionJwt);\n        return token;\n      } catch (error) {\n        logger?.error('failed to parse jwt from access key', error);\n        throw Error(`could not exchange access key - failed to validate jwt. Error: ${error}`);\n      }\n    },\n\n    /**\n     * Make sure that all given permissions exist on the parsed JWT top level claims\n     * @param authInfo JWT parsed info\n     * @param permissions list of permissions to make sure they exist on te JWT claims\n     * @returns true if all permissions exist, false otherwise\n     */\n    validatePermissions(authInfo: AuthenticationInfo, permissions: string[]): boolean {\n      return sdk.validateTenantPermissions(authInfo, '', permissions);\n    },\n\n    /**\n     * Retrieves the permissions from JWT top level claims that match the specified permissions list\n     * @param authInfo JWT parsed info containing the permissions\n     * @param permissions List of permissions to match against the JWT claims\n     * @returns An array of permissions that are both in the JWT claims and the specified list. Returns an empty array if no matches are found\n     */\n    getMatchedPermissions(authInfo: AuthenticationInfo, permissions: string[]): string[] {\n      return sdk.getMatchedTenantPermissions(authInfo, '', permissions);\n    },\n\n    /**\n     * Make sure that all given permissions exist on the parsed JWT tenant claims\n     * @param authInfo JWT parsed info\n     * @param tenant tenant to validate the permissions for\n     * @param permissions list of permissions to make sure they exist on te JWT claims\n     * @returns true if all permissions exist, false otherwise\n     */\n    validateTenantPermissions(\n      authInfo: AuthenticationInfo,\n      tenant: string,\n      permissions: string[],\n    ): boolean {\n      // check if user is associated to the tenant\n      if (tenant && !isUserAssociatedWithTenant(authInfo, tenant)) return false;\n\n      const granted = getAuthorizationClaimItems(authInfo, permissionsClaimName, tenant);\n      return permissions.every((perm) => granted.includes(perm));\n    },\n\n    /**\n     * Retrieves the permissions from JWT tenant claims that match the specified permissions list\n     * @param authInfo JWT parsed info containing the permissions\n     * @param tenant tenant to match the permissions for\n     * @param permissions List of permissions to match against the JWT claims\n     * @returns An array of permissions that are both in the JWT claims and the specified list. Returns an empty array if no matches are found\n     * */\n    getMatchedTenantPermissions(\n      authInfo: AuthenticationInfo,\n      tenant: string,\n      permissions: string[],\n    ): string[] {\n      if (tenant && !isUserAssociatedWithTenant(authInfo, tenant)) return [];\n\n      const granted = getAuthorizationClaimItems(authInfo, permissionsClaimName, tenant);\n      return permissions.filter((perm) => granted.includes(perm));\n    },\n\n    /**\n     * Make sure that all given roles exist on the parsed JWT top level claims\n     * @param authInfo JWT parsed info\n     * @param roles list of roles to make sure they exist on te JWT claims\n     * @returns true if all roles exist, false otherwise\n     */\n    validateRoles(authInfo: AuthenticationInfo, roles: string[]): boolean {\n      return sdk.validateTenantRoles(authInfo, '', roles);\n    },\n\n    /**\n     * Retrieves the roles from JWT top level claims that match the specified roles list\n     * @param authInfo JWT parsed info containing the roles\n     * @param roles List of roles to match against the JWT claims\n     * @returns An array of roles that are both in the JWT claims and the specified list. Returns an empty array if no matches are found\n     */\n    getMatchedRoles(authInfo: AuthenticationInfo, roles: string[]): string[] {\n      return sdk.getMatchedTenantRoles(authInfo, '', roles);\n    },\n\n    /**\n     * Make sure that all given roles exist on the parsed JWT tenant claims\n     * @param authInfo JWT parsed info\n     * @param tenant tenant to validate the roles for\n     * @param roles list of roles to make sure they exist on te JWT claims\n     * @returns true if all roles exist, false otherwise\n     */\n    validateTenantRoles(authInfo: AuthenticationInfo, tenant: string, roles: string[]): boolean {\n      // check if user is associated to the tenant\n      if (tenant && !isUserAssociatedWithTenant(authInfo, tenant)) return false;\n\n      const membership = getAuthorizationClaimItems(authInfo, rolesClaimName, tenant);\n      return roles.every((role) => membership.includes(role));\n    },\n\n    /**\n     * Retrieves the roles from JWT tenant claims that match the specified roles list\n     * @param authInfo JWT parsed info containing the roles\n     * @param tenant tenant to match the roles for\n     * @param roles List of roles to match against the JWT claims\n     * @returns An array of roles that are both in the JWT claims and the specified list. Returns an empty array if no matches are found\n     */\n    getMatchedTenantRoles(authInfo: AuthenticationInfo, tenant: string, roles: string[]): string[] {\n      if (tenant && !isUserAssociatedWithTenant(authInfo, tenant)) return [];\n\n      const membership = getAuthorizationClaimItems(authInfo, rolesClaimName, tenant);\n      return roles.filter((role) => membership.includes(role));\n    },\n  };\n\n  return wrapWith(\n    sdk,\n    [\n      'otp.verify.email',\n      'otp.verify.sms',\n      'otp.verify.voice',\n      'otp.verify.whatsapp',\n      'magicLink.verify',\n      'enchantedLink.signUp',\n      'enchantedLink.signIn',\n      'oauth.exchange',\n      'saml.exchange',\n      'totp.verify',\n      'webauthn.signIn.finish',\n      'webauthn.signUp.finish',\n      'refresh',\n    ] as const,\n    withCookie,\n  );\n};\n\n/** Descope SDK client with delivery methods enum.\n *\n * Please see full documentation at {@link https://docs.descope.com/guides Descope Docs}\n * @example Usage\n *\n * ```js\n * import descopeSdk from '@descope/node-sdk';\n *\n * const myProjectId = 'xxx';\n * const sdk = descopeSdk({ projectId: myProjectId });\n *\n * const userLoginId = 'loginId';\n * sdk.otp.signIn.email(userLoginId);\n * const jwtResponse = sdk.otp.verify.email(userLoginId, codeFromEmail);\n * ```\n */\n\nnodeSdk.RefreshTokenCookieName = refreshTokenCookieName;\nnodeSdk.SessionTokenCookieName = sessionTokenCookieName;\nnodeSdk.DescopeErrors = descopeErrors;\n\nexport default nodeSdk;\nexport type {\n  DeliveryMethod,\n  JWTResponse,\n  OAuthProvider,\n  ResponseData,\n  SdkResponse,\n} from '@descope/core-js-sdk';\nexport type { AuthenticationInfo };\n","import { HttpClient } from '@descope/core-js-sdk';\nimport withUser from './user';\nimport withProject from './project';\nimport withTenant from './tenant';\nimport withJWT from './jwt';\nimport withPermission from './permission';\nimport withRole from './role';\nimport withGroup from './group';\nimport withSSOSettings from './sso';\nimport withAccessKey from './accesskey';\nimport WithFlow from './flow';\nimport WithTheme from './theme';\nimport WithAudit from './audit';\nimport WithAuthz from './authz';\nimport withSSOApplication from './ssoapplication';\nimport withPassword from './password';\nimport WithFGA from './fga';\nimport withInboundApplication from './inboundapplication';\nimport withOutboundApplication from './outboundapplication';\n\n/** Constructs a higher level Management API that wraps the functions from code-js-sdk */\nconst withManagement = (client: HttpClient) => ({\n  user: withUser(client),\n  project: withProject(client),\n  accessKey: withAccessKey(client),\n  tenant: withTenant(client),\n  ssoApplication: withSSOApplication(client),\n  inboundApplication: withInboundApplication(client),\n  outboundApplication: withOutboundApplication(client),\n  sso: withSSOSettings(client),\n  jwt: withJWT(client),\n  permission: withPermission(client),\n  password: withPassword(client),\n  role: withRole(client),\n  group: withGroup(client),\n  flow: WithFlow(client),\n  theme: WithTheme(client),\n  audit: WithAudit(client),\n  authz: WithAuthz(client),\n  fga: WithFGA(client),\n});\n\nexport default withManagement;\n","/** Common Error Codes */\nexport default {\n  badRequest: 'E011001',\n  missingArguments: 'E011002',\n  invalidRequest: 'E011003',\n  invalidArguments: 'E011004',\n  wrongOTPCode: 'E061102',\n  tooManyOTPAttempts: 'E061103',\n  enchantedLinkPending: 'E062503',\n  userNotFound: 'E062108',\n};\n"],"names":["_a","globalThis","Headers","patchedFetch","args","forEach","arg","_b","highWaterMark","crossFetch","getCookieValue","cookie","name","match","RegExp","withCookie","fn","async","resp","data","_d","refreshJwt","rest","__rest","cookies","options","push","cookieDomain","cookieMaxAge","cookiePath","response","headers","get","_c","Object","assign","getAuthorizationClaimItems","authInfo","claim","tenant","value","token","Array","isArray","isUserAssociatedWithTenant","apiPaths","create","createTestUser","createBatch","update","patch","delete","deleteBatch","deleteAllTestUsers","load","logout","search","searchTestUsers","getProviderToken","updateStatus","updateLoginId","updateEmail","updatePhone","updateDisplayName","updatePicture","updateCustomAttribute","setRole","addRole","removeRole","setSSOApps","addSSOApps","removeSSOApps","addTenant","removeTenant","setPassword","setTemporaryPassword","setActivePassword","expirePassword","removeAllPasskeys","removeTOTPSeed","generateOTPForTest","generateMagicLinkForTest","generateEnchantedLinkForTest","generateEmbeddedLink","generateSignUpEmbeddedLink","history","updateName","updateTags","clone","projectsList","exportSnapshot","importSnapshot","validateSnapshot","deactivate","activate","settings","loadAll","searchAll","generateSSOConfigurationLink","oidcCreate","samlCreate","oidcUpdate","samlUpdate","secret","rotate","fetchToken","fetchTokenByScopes","fetchTenantToken","fetchTenantTokenByScopes","settingsNew","metadata","mapping","settingsv2","settingsAllV2","oidc","configure","saml","impersonate","stopImpersonation","signIn","signUp","signUpOrIn","anonymous","clientAssertion","list","export","import","run","loadAllGroups","loadAllGroupsForMember","loadAllGroupMembers","createEvent","schemaSave","schemaDelete","schemaLoad","nsSave","nsDelete","rdSave","rdDelete","reCreate","reDelete","reDeleteResources","reDeleteResourceRelationsForResources","hasRelations","who","resource","targets","targetAll","targetWithRelation","getModified","schema","relations","deleteRelations","check","resourcesLoad","resourcesSave","transformUsersForBatch","users","map","roles","user","roleNames","withProject","httpClient","transformResponse","post","tags","environment","listProjects","projects","id","request","files","withTenant","selfProvisioningDomains","customAttributes","enforceSSO","disabled","createWithId","cascade","queryParams","tenants","ids","names","tenantIds","tenantNames","tenantSelfProvisioningDomains","getSettings","tenantId","configureSettings","expireDuration","ssoId","email","templateId","expireTime","withJWT","jwt","customClaims","refreshDuration","impersonatorId","loginId","validateConsent","selectedTenant","loginOptions","signUpOptions","generateClientAssertionJwt","issuer","subject","audience","expiresIn","withPermission","description","newName","permissions","withRole","permissionNames","defaultRole","default","withGroup","userIds","loginIds","groupId","transformSettingsResponse","readySettings","attributeMapping","userAttrMapping","groupsMapping","gm","rm","roleName","role","withSSOSettings","newSettings","displayName","deleteSettings","idpURL","idpCert","entityId","redirectURL","domains","configureMetadata","idpMetadataURL","configureMapping","roleMappings","configureOIDCSettings","configureSAMLSettings","redirectUrl","configureSAMLByMetadata","loadSettings","loadAllSettings","SSOSettings","res","setting","transformAllSettingsResponse","withAccessKey","userId","permittedIps","keyTenants","key","keys","WithFlow","flowIds","flowId","flow","screens","output","WithTheme","theme","WithAudit","searchOptions","body","externalIds","audits","a","occurred","parseFloat","createOptions","WithAuthz","saveSchema","upgrade","deleteSchema","loadSchema","saveNamespace","namespace","oldName","schemaName","deleteNamespace","saveRelationDefinition","relationDefinition","deleteRelationDefinition","createRelations","deleteRelationsForResources","resources","deleteResourceRelationsForResources","deleteRelationsForIds","relationQueries","whoCanAccess","resourceRelations","ignoreTargetSetRelations","targetsRelations","includeTargetSetRelations","whatCanTargetAccess","target","whatCanTargetAccessWithRelation","since","getTime","withSSOApplication","createOidcApplication","enabled","createSamlApplication","updateOidcApplication","updateSamlApplication","apps","withPassword","WithFGA","tuples","loadResourcesDetails","resourceIdentifiers","resourcesDetails","saveResourcesDetails","deleteAllRelations","withInboundApplication","createApplication","updateApplication","patchApplication","deleteApplication","loadApplication","loadAllApplications","getApplicationSecret","rotateApplicationSecret","searchConsents","consents","deleteConsents","withOutboundApplication","app","appId","scopes","nodeSdk","authManagementKey","managementKey","publicKey","config","nodeHeaders","process","versions","node","authSdkConfig","fetch","baseHeaders","hooks","beforeRequest","requestConfig","concat","coreSdk","createSdk","projectId","logger","mgmtSdkConfig","baseConfig","mgmtHttpClient","createHttpClient","management","client","emailOrOptions","phone","userTenants","picture","verifiedEmail","verifiedPhone","givenName","middleName","familyName","additionalLoginIds","undefined","test","invite","inviteUrl","sendMail","sendSMS","inviteBatch","templateOptions","ssoAppIds","scim","deleteByUserId","loadByUserId","logoutUser","logoutUserByUserId","limit","page","testUsersOnly","withTestUser","statuses","emails","phones","searchReq","provider","providerTokenOptions","withRefreshToken","forceRefresh","status","newLoginId","isVerified","verified","attributeKey","attributeValue","setRoles","addRoles","removeRoles","setTenantRoles","addTenantRoles","removeTenantRoles","addSSOapps","setSSOapps","removeSSOapps","generateOTPForTestUser","deliveryMethod","generateMagicLinkForTestUser","uri","URI","generateEnchantedLinkForTestUser","timeout","emailVerified","phoneVerified","password","project","accessKey","ssoApplication","inboundApplication","outboundApplication","sso","permission","group","audit","authz","fga","sdk","refresh","externalToken","header","kid","Error","parsedKey","JSON","parse","importJWK","e","error","publicKeys","then","json","Promise","all","reduce","acc","jwk","toString","fetchKeys","jwtVerify","getKey","clockTolerance","payload","iss","split","pop","errors","JWTClaimValidationFailed","sessionToken","validateJwt","refreshToken","jwtResp","ok","seesionJwt","join","sessionJwt","_e","_f","errorMessage","refreshTokenErr","validateSession","log","refreshSession","exchange","validatePermissions","validateTenantPermissions","getMatchedPermissions","getMatchedTenantPermissions","granted","every","perm","includes","filter","validateRoles","validateTenantRoles","getMatchedRoles","getMatchedTenantRoles","membership","wrapWith","RefreshTokenCookieName","SessionTokenCookieName","DescopeErrors","badRequest","missingArguments","invalidRequest","invalidArguments","wrongOTPCode","tooManyOTPAttempts","enchantedLinkPending","userNotFound"],"mappings":"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"}